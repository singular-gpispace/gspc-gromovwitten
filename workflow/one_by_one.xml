<defun name="feynman">

  <in name="degree" type="string" place="degree"/>
  <in name="edge" type="string" place="edge"/>

  <out name="result" type="string" place="result"/>
  
  <net>

    <place name="degree" type="string"/>
    <place name="edge" type="string"/>
    <place name="result" type="string"/>

    <transition name="partition">
      <defun>
        <inout name="v" type="string"/>
        <in name="w" type="string"/>
        <module name="work" function="step_1 (v)">
          <cinclude href="iostream"/>
          <code><![CDATA[
            std::cout << "### step-1 " << v << std::endl;
          ]]></code>
        </module>
      </defun>
      <connect-in port="w" place="edge"/>
      <connect-in port="v" place="degree"/>
      <connect-out port="v" place="s2"/>
    </transition>

    <place name="s2" type="string"/>


<transition name="permutation">
      <defun>
        <inout name="v" type="string"/>
        <module name="work" function="step_1 (v)">
          <cinclude href="iostream"/>
          <code><![CDATA[
            std::cout << "### step-1 " << v << std::endl;
          ]]></code>
        </module>
      </defun>
      <connect-in port="v" place="s2"/>
      <connect-out port="v" place="s1"/>
    </transition>

    <place name="s1" type="string"/>
    <place name="graph" type="string"/>
    <transition name="feynman">
      <defun>
        <inout name="v" type="string"/>
        <in name="vv" type="string"/>

        <module name="feynman" function="plus()">
        <code><![CDATA[
          
        ]]></code>
        </module>
      </defun>
      <connect-in port="vv" place="graph"/>
      <connect-in port="v" place="s1"/>
      <connect-out port="v" place="result"/>
    </transition>

  </net>

</defun>