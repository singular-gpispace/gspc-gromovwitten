<defun name="feynman">

  <in name="degree" type="int" place="degree"/>
  <in name="edge" type="int" place="edge"/>

  <net>
    <place name="degree" type="int"/>
    <place name="edge" type="int"/>

    <transition name="partition">
      <defun>
        <in name="d" type="int"/>
        <in name="n" type="int"/>
        <out name="v" type="string"/> 

        <module name="Sum_degree" function="v sum_deg (n,d)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="sstream"/>
          <code><![CDATA[

std::vector<std::vector<int>> ru; 

    for (int e = 0; e < d; e++) {
        std::vector<int> x(n, 0);
        x[0] = d - e;
        x[n - 1] = e;
        ru.push_back(x);
    }

    std::stringstream ss;
    for (const auto& innerVec : ru) {
        for (int val : innerVec) {
            ss << val << ' ';
        }
        ss << '\n'; 
    }
    return ss.str();

          ]]></code>
        </module>
      </defun>
      <connect-in port="n" place="edge"/>
      <connect-in port="d" place="degree"/>
      <connect-out port="v" place="d_vectors"/>
    </transition>

    <place name="d_vectors" type="string"/>

<transition name="Combination">
      <defun>
        <in name="v" type="string"/>
        <out name="vec" type="string"/>
        <module name="Combination_vector" function="vec partition(v)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="numeric"/>
          <cinclude href="sstream"/>

          <code><![CDATA[
                        
            std::vector<std::vector<int>> stringToVector(const std::string& str) {
                std::vector<std::vector<int>> result;
                std::stringstream ss(str);
                std::string line;
                while (std::getline(ss, line)) {
                    std::vector<int> innerVec;
                    std::stringstream lineStream(line);
                    int num;
                    while (lineStream >> num) {
                        innerVec.push_back(num);
                    }
                    result.push_back(innerVec);
                }
                return result;
            }

            std::string vectorToStringv(const std::vector<std::vector<std::vector<int>>>& vec) {
                std::stringstream ss;
                for (const auto& innerVec1 : vec) {
                    for (const auto& innerVec2 : innerVec1) {
                        for (int val : innerVec2) {
                            ss << val << ' ';
                        }
                        ss << '\n'; 
                    }
                    ss << '\n'; 
                }
                return ss.str();
            }
            std::vector<std::vector<std::vector<int>> > ge;
            std::vector<std::vector<int>> ru = stringToVector(v);
              for( std::vector<int> x:ru){
                ge.push_back(generate_combination(x));
              }
              std::string gg = vectorToStringv(ge);
            return gg; 
          ]]></code>
        </module>
      </defun>
      <connect-in port="v" place="d_vectors"/>
      <connect-out port="vec" place="branchtype"/>
    </transition>

    <place name="branchtype" type="string"/>
    <place name="graph" type="string"/>


    <transition name="feynman_degree">
      <defun>
        <in name="a" type="string"/>
        <in name="G" type="string"/>
        <out name="s" type="int"/>

        <module name="feynman" function="s feynman_integral_degree(G,a)">
        <cinclude href="iostream"/>
        <cinclude href="vector"/>
        <cinclude href="numeric"/>
        <cinclude href="tuple"/>
        <cinclude href="algorithm"/>
        <cinclude href="unordered_map"/>
        <cinclude href="../include/feynman/feynman.hpp"/>
        <cinclude href="functional"/>
        <cinclude href="cmath"/>

        <code><![CDATA[
          std::vector<std::vector<std::vector<int>>> aj=stringToVectorv(a);
            std::vector<std::vector<int>> ag=flattenVector(aj);
          std::vector<double> fey;
          for( std::vector<int> v:ag){
            fey.push_back(feynman_integral(G,v));
          }
          return fey;
          
        ]]></code>
        </module>
      </defun>
      <connect-in port="G" place="graph"/>
      <connect-in port="a" place="branchtype"/>
      <connect-out port="s" place="fey"/>

    </transition>

<place name="fey" type="int"/>

    <transition name="RHS">
      <defun>
        <inout name="a" type="int"/>
        <inout name="s" type="control"/>

        <module name="token" function="plus()">
        <code><![CDATA[
          
        ]]></code>
        </module>
      </defun>
      <connect-in port="a" place="fey"/>
      <connect-in port="s" place="right_init"/>
      <connect-out port="s" place="left_init"/>
      <connect-out port="a" place="R"/>

    </transition>

<place name="left_init" type="control"/>
<place name="right_init" type="control">
    <token><value>[]</value></token>
</place>

    <transition name="LHS">
      <defun>
        <inout name="a" type="int"/>
        <inout name="s" type="control"/>

        <module name="token" function="count()">
        <code><![CDATA[
          
        ]]></code>
        </module>
      </defun>
      <connect-in port="s" place="left_init"/>
      <connect-out port="s" place="right_init"/>
      <connect-in port="a" place="fey"/>
      <connect-out port="a" place="L"/>
    </transition>


<place name="L" type="int"/>
<place name="R" type="int"/>

    <transition name="Reduce">
      <defun>
        <out name="s" type="int"/>
        <in name="l" type="int"/>
        <in name="r" type="int"/>

        <module name="sum" function=" s add(l,r)">
        <code><![CDATA[
          int su = l + r;
          return su;
        ]]></code>
        </module>
      </defun>
      <connect-in port="l" place="L"/>
      <connect-in port="r" place="R"/>
      <connect-out port="s" place="fey"/>
    </transition>
  </net>

</defun>
