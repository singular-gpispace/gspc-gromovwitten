<defun name="feynman_deg">

  <in name="degree" type="int" place="degree"/>
  <in name="N" type="int" place="N"/>
  <in name="graph" type="list" place="graph"/>
  <in name="genus" type="string" place="genus"/>
  <in name="loop" type="string" place="loop"/>
  <out name="fey_out" type="string" place="fey_out"/>
  <out name="sum" type="string" place="sum"/>


  <net>
    <place name="degree" type="int"/>
    <place name="N" type="int"/>
    <place name="fey_out" type="string" />

    <transition name="partition">
      <defun>
        <in name="d" type="int"/>
        <in name="n" type="int"/>
        <out name="v" type="list"/>

        <module name="feynman_module" function=" gen_block_(n,d,v)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="sstream"/>
          <cinclude href="feynman.hpp"/>
          <code><![CDATA[

          vector2d gen=gen_block(n,d);
          for (std::vector<int> ge:gen){
              std::list<pnet::type::value::value_type> temp;
              for (int xi : ge) {
                  temp.push_back(pnet::type::value::value_type(xi));
              }
              v.push_back(temp);
          }

         ]]>          </code>
        </module>
      </defun>
      <connect-in port="n" place="N"/>
      <connect-in port="d" place="degree"/>
      <connect-out-many port="v" place="d_vectors"/>
    </transition>

    <place name="d_vectors" type="list"/>

    <transition name="Combination">
      <defun>
        <in name="v" type="list"/>
        <in name="G" type="list"/>
        <out name="vec" type="list"/>

        <module name="feynman_module" function=" partition(G, v, vec)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="numeric"/>
          <cinclude href="sstream"/>
          <cinclude href="../include/feynman/feynman.hpp"/>

          <code><![CDATA[
             std::vector<int> xxx; // Define xxx outside the inner loop
            for (const auto &vii : G)
            {
                if (auto ptr = boost::get<int>(&vii))
                {                             // Check if the element is an integer
                    xxx.push_back( *ptr ); // Push the integer to the vector xx
                }
            }
         std::vector<std::pair<int, int>> Gv;
        
            // Iterate over the vector of integers, creating pairs from consecutive elements
            for (size_t i = 0; i < xxx.size(); i += 2)
            {
                Gv.push_back(std::make_pair(xxx[i], xxx[i + 1]));
            }

            /**************************************************************************
            ***************************************************************************
            **************************************************************************/
                              
            std::vector<int> x;
          for (const auto& elem : v) {
            auto ptr = boost::get<int>(&elem) ;
              x.push_back(*ptr);
          }
    vector2d gen=iterate_permutation(Gv, x);
      using pnet_value = pnet::type::value::value_type;
    using pnet_list = std::list<pnet_value>;
        for (std::vector<int> &a : gen)
    {
        pnet_list temp_a;
        for (int xi : a)
        {
            temp_a.push_back(pnet::type::value::value_type(xi));
        }

        vec.push_back(temp_a);
    }

          ]]>
          </code>
        </module>
      </defun>
      <connect-in port="v" place="d_vectors"/>
      <connect-read port="G" place="graph"/>
      <connect-out-many port="vec" place="branchtype"/>
    </transition>

    <place name="branchtype" type="list"/>
    <place name="graph" type="list"/>
    <place name="genus" type="string"/>
    <place name="loop" type="string"/>

    <transition name="feynman_degree">
      <defun>
        <in name="a" type="list"/>
        <in name="G" type="list"/>
        <in name="gg" type="string"/>
        <in name="l" type="string"/>

        <out name="s" type="string"/>

        <module name="feynman_module" function="feynman_integral_degree(s,G,a,gg,l)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="numeric"/>
          <cinclude href="tuple"/>
          <cinclude href="algorithm"/>
          <cinclude href="unordered_map"/>
          <cinclude href="functional"/>
          <cinclude href="cmath"/>
          <cinclude href="sstream"/>
          <cinclude href="stack"/>
          <cinclude href="unordered_set"/>
          <cinclude href="feynman.hpp"/>
          <code><![CDATA[
          std::vector<int> xxx; // Define xxx outside the inner loop
            for (const auto &vii : G)
            {
                if (auto ptr = boost::get<int>(&vii))
                {                             // Check if the element is an integer
                    xxx.push_back( *ptr ); // Push the integer to the vector xx
                }
            }
         std::vector<std::pair<int, int>> Gv;
        
            // Iterate over the vector of integers, creating pairs from consecutive elements
            for (size_t i = 0; i < xxx.size(); i += 2)
            {
                Gv.push_back(std::make_pair(xxx[i], xxx[i + 1]));
            }
/**************************************************************************
***************************************************************************
**************************************************************************/

                auto factor = boost::get<int>(*a.begin()); // Get the factor
                std::vector<int> av;

                  for (auto it = std::next(a.begin()); it != a.end(); ++it)
                  {
                      auto intValue = boost::get<int>(*it);
                      av.push_back(intValue);

                  }

/*************************************************************************
**************************************************************************/
std::vector<int> g=stringToVectorInt(gg);
std::vector<int> ll= stringToVectorInt(l);
/*************************************************************************
**************************************************************************/
fmpq_t result;
        fmpq_init(result);

        

 fmpq_t fey_branch_av;
  fmpq_init(fey_branch_av);

    // Compute Feynman integral of degree d
  feynman_integral_branch_type(fey_branch_av, Gv, av, g, ll);
   
   // Multiply fey_branch_av by factor
        fmpq_mul_ui(result, fey_branch_av, factor);

       std::string fey= fmpqToString(result);
      fmpq_clear(fey_branch_av);

    s=fey;
    
      ]]>
          </code>
        </module>
      </defun>
      <connect-read port="G" place="graph"/>
      <connect-in port="a" place="branchtype"/>
      <connect-read port="gg" place="genus"/>
      <connect-read port="l" place="loop"/>

      <connect-out port="s" place="fey_out"/>
    </transition>
    <place name="sum" type="string">
      <token>
        <value>"0"</value>
      </token>
    </place>
    <transition name="Reduce">
      <defun>
        <in name="s" type="string"/>
        <out name="sum_frac" type="string"/>

        <in name="sum" type="string"/>
        <module name="feynman_module" function="sum_frac plus (s, sum)">
          <cinclude href="feynman.hpp"/>

          <code><![CDATA[
           fmpq_t f1, f2, result;
              fmpq_init(f1);
              fmpq_init(f2);
              fmpq_init(result);

            stringToFmpq(f1, s); 
            stringToFmpq(f2, sum);
            fmpq_add(result, f1, f2);
            std::string sum_frac= fmpqToString(result);
            fmpq_clear(f1);
            fmpq_clear(f2);
            fmpq_clear(result);
            return sum_frac;
          ]]>
          </code>
        </module>
      </defun>
      <connect-in port="s" place="fey_out"/>
      <connect-in port="sum" place="sum"/>
      <connect-out port="sum_frac" place="sum"/>

    </transition>

  </net>

</defun>