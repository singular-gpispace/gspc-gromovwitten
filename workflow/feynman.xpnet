<?xml version="1.0" encoding="UTF-8"?>
<defun name="feynman_deg">

  <in name="degree" type="int" place="degree"/>
  <in name="deg" type="int" place="deg"/>
  <in name="N" type="int" place="N"/>
  <in name="graph" type="list" place="graph"/>
  <in name="total" type="unsigned long" place="total"/>
  <out name="answer" type="string" place="answer"/>

  <net>
    <place name="degree" type="int"/>
    <place name="deg" type="int"/>
    <place name="N" type="int"/>
    <place name="graph" type="list"/>
    <place name="total" type="unsigned long"/>
    <place name="answer" type="string"/>
    <place name="ns" type="control"/>
    <place name="counter_total" type="unsigned long">
      <token>
        <value>0UL</value>
      </token>
    </place>
    <place name="fey_sum" type="string"/>
    <place name="control_2" type="control">
      <token>
        <value>[]</value>
      </token>
    </place>
    <place name="d_vectors_2" type="list"/>
    <place name="branchtype_2" type="list"/>
    <place name="fey_out_2" type="string"/>
    <place name="sum_2" type="string">
      <token>
        <value>"0"</value>
      </token>
    </place>
    <place name="control_3" type="control">
      <token>
        <value>[]</value>
      </token>
    </place>
    <place name="d_vectors_3" type="list"/>
    <place name="branchtype_3" type="list"/>
    <place name="fey_out_3" type="string"/>
    <place name="sum_3" type="string">
      <token>
        <value>"0"</value>
      </token>
    </place>
    <place name="control_4" type="control">
      <token>
        <value>[]</value>
      </token>
    </place>
    <place name="d_vectors_4" type="list"/>
    <place name="branchtype_4" type="list"/>
    <place name="fey_out_4" type="string"/>
    <place name="sum_4" type="string">
      <token>
        <value>"0"</value>
      </token>
    </place>
    <place name="control_5" type="control">
      <token>
        <value>[]</value>
      </token>
    </place>
    <place name="d_vectors_5" type="list"/>
    <place name="branchtype_5" type="list"/>
    <place name="fey_out_5" type="string"/>
    <place name="sum_5" type="string">
      <token>
        <value>"0"</value>
      </token>
    </place>
    <place name="control_6" type="control">
      <token>
        <value>[]</value>
      </token>
    </place>
    <place name="d_vectors_6" type="list"/>
    <place name="branchtype_6" type="list"/>
    <place name="fey_out_6" type="string"/>
    <place name="sum_6" type="string">
      <token>
        <value>"0"</value>
      </token>
    </place>
    <place name="control_7" type="control">
      <token>
        <value>[]</value>
      </token>
    </place>
    <place name="d_vectors_7" type="list"/>
    <place name="branchtype_7" type="list"/>
    <place name="fey_out_7" type="string"/>
    <place name="sum_7" type="string">
      <token>
        <value>"0"</value>
      </token>
    </place>
    <place name="control_8" type="control">
      <token>
        <value>[]</value>
      </token>
    </place>
    <place name="d_vectors_8" type="list"/>
    <place name="branchtype_8" type="list"/>
    <place name="fey_out_8" type="string"/>
    <place name="sum_8" type="string">
      <token>
        <value>"0"</value>
      </token>
    </place>
    <place name="control_9" type="control">
      <token>
        <value>[]</value>
      </token>
    </place>
    <place name="d_vectors_9" type="list"/>
    <place name="branchtype_9" type="list"/>
    <place name="fey_out_9" type="string"/>
    <place name="sum_9" type="string">
      <token>
        <value>"0"</value>
      </token>
    </place>
    <place name="control_10" type="control">
      <token>
        <value>[]</value>
      </token>
    </place>
    <place name="d_vectors_10" type="list"/>
    <place name="branchtype_10" type="list"/>
    <place name="fey_out_10" type="string"/>
    <place name="sum_10" type="string">
      <token>
        <value>"0"</value>
      </token>
    </place>
    <place name="control_11" type="control">
      <token>
        <value>[]</value>
      </token>
    </place>
    <place name="d_vectors_11" type="list"/>
    <place name="branchtype_11" type="list"/>
    <place name="fey_out_11" type="string"/>
    <place name="sum_11" type="string">
      <token>
        <value>"0"</value>
      </token>
    </place>
    <place name="control_12" type="control">
      <token>
        <value>[]</value>
      </token>
    </place>
    <place name="d_vectors_12" type="list"/>
    <place name="branchtype_12" type="list"/>
    <place name="fey_out_12" type="string"/>
    <place name="sum_12" type="string">
      <token>
        <value>"0"</value>
      </token>
    </place>
    <place name="control_13" type="control">
      <token>
        <value>[]</value>
      </token>
    </place>
    <place name="d_vectors_13" type="list"/>
    <place name="branchtype_13" type="list"/>
    <place name="fey_out_13" type="string"/>
    <place name="sum_13" type="string">
      <token>
        <value>"0"</value>
      </token>
    </place>
    <place name="control_14" type="control">
      <token>
        <value>[]</value>
      </token>
    </place>
    <place name="d_vectors_14" type="list"/>
    <place name="branchtype_14" type="list"/>
    <place name="fey_out_14" type="string"/>
    <place name="sum_14" type="string">
      <token>
        <value>"0"</value>
      </token>
    </place>
    <place name="control_15" type="control">
      <token>
        <value>[]</value>
      </token>
    </place>
    <place name="d_vectors_15" type="list"/>
    <place name="branchtype_15" type="list"/>
    <place name="fey_out_15" type="string"/>
    <place name="sum_15" type="string">
      <token>
        <value>"0"</value>
      </token>
    </place>
    <place name="control_16" type="control">
      <token>
        <value>[]</value>
      </token>
    </place>
    <place name="d_vectors_16" type="list"/>
    <place name="branchtype_16" type="list"/>
    <place name="fey_out_16" type="string"/>
    <place name="sum_16" type="string">
      <token>
        <value>"0"</value>
      </token>
    </place>
    <place name="control_17" type="control">
      <token>
        <value>[]</value>
      </token>
    </place>
    <place name="d_vectors_17" type="list"/>
    <place name="branchtype_17" type="list"/>
    <place name="fey_out_17" type="string"/>
    <place name="sum_17" type="string">
      <token>
        <value>"0"</value>
      </token>
    </place>
    <place name="control_18" type="control">
      <token>
        <value>[]</value>
      </token>
    </place>
    <place name="d_vectors_18" type="list"/>
    <place name="branchtype_18" type="list"/>
    <place name="fey_out_18" type="string"/>
    <place name="sum_18" type="string">
      <token>
        <value>"0"</value>
      </token>
    </place>
    <place name="control_19" type="control">
      <token>
        <value>[]</value>
      </token>
    </place>
    <place name="d_vectors_19" type="list"/>
    <place name="branchtype_19" type="list"/>
    <place name="fey_out_19" type="string"/>
    <place name="sum_19" type="string">
      <token>
        <value>"0"</value>
      </token>
    </place>
    <place name="control_20" type="control">
      <token>
        <value>[]</value>
      </token>
    </place>
    <place name="d_vectors_20" type="list"/>
    <place name="branchtype_20" type="list"/>
    <place name="fey_out_20" type="string"/>
    <place name="sum_20" type="string">
      <token>
        <value>"0"</value>
      </token>
    </place>
    <place name="control_21" type="control">
      <token>
        <value>[]</value>
      </token>
    </place>
    <place name="d_vectors_21" type="list"/>
    <place name="branchtype_21" type="list"/>
    <place name="fey_out_21" type="string"/>
    <place name="sum_21" type="string">
      <token>
        <value>"0"</value>
      </token>
    </place>
    <place name="control_22" type="control">
      <token>
        <value>[]</value>
      </token>
    </place>
    <place name="d_vectors_22" type="list"/>
    <place name="branchtype_22" type="list"/>
    <place name="fey_out_22" type="string"/>
    <place name="sum_22" type="string">
      <token>
        <value>"0"</value>
      </token>
    </place>

    <transition name="partition_2">
      <defun>
        <in name="control_2" type="control"/>
        <in name="i" type="int"/>
        <in name="n" type="int"/>
        <out name="v" type="list"/>
        <module name="feynman_module" function="gen_block_2(n,i,v,control_2)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="sstream"/>
          <cinclude href="feynman.hpp"/>
          <code><![CDATA[
          vector2d gen=gen_block(n,2);
          for (std::vector<int> ge:gen){
              std::list<pnet::type::value::value_type> temp;
              for (int xi : ge) {
                  temp.push_back(pnet::type::value::value_type(xi));
              }
              v.push_back(temp);
          }
                  ]]>
          </code>
        </module>
      </defun>
      <connect-read port="i" place="degree"/>
      <connect-read port="n" place="N"/>
      <connect-in port="control_2" place="control_2"/>
      <connect-out-many port="v" place="d_vectors_2"/>
    </transition>

    <transition name="Combination_2">
      <defun>
        <in name="v" type="list"/>
        <out name="vec" type="list"/>
        <module name="feynman_module" function="partition_2(v, vec)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="numeric"/>
          <cinclude href="sstream"/>
          <cinclude href="../include/feynman/feynman.hpp"/>
          <code><![CDATA[
          std::vector<int> x;
          for (const auto& elem : v) {
            auto ptr = boost::get<int>(&elem) ;
              x.push_back(*ptr);
          }
          vector2d gen=iterate( x);
          using pnet_value = pnet::type::value::value_type;
          using pnet_list = std::list<pnet_value>;
          for (std::vector<int> &a : gen)
          {
              pnet_list temp_a;
              for (int xi : a)
              {
                  temp_a.push_back(pnet::type::value::value_type(xi));
              }
              vec.push_back(temp_a);
          }
                 ]]>
          </code>
        </module>
      </defun>
      <connect-in port="v" place="d_vectors_2"/>
      <connect-out-many port="vec" place="branchtype_2"/>
    </transition>

    <transition name="feynman_degree_2">
      <defun>
        <in name="deg" type="int"/>
        <in name="a" type="list"/>
        <in name="G" type="list"/>
        <out name="s" type="string"/>
        <module name="feynman_module" function="feynman_integral_degree_2(deg,s,G,a)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="numeric"/>
          <cinclude href="tuple"/>
          <cinclude href="algorithm"/>
          <cinclude href="unordered_map"/>
          <cinclude href="functional"/>
          <cinclude href="cmath"/>
          <cinclude href="sstream"/>
          <cinclude href="stack"/>
          <cinclude href="unordered_set"/>
          <cinclude href="feynman.hpp"/>
          <code><![CDATA[
          std::vector<int> xxx;
          for (const auto &vii : G)
          {
              if (auto ptr = boost::get<int>(&vii))
              {
                  xxx.push_back( *ptr );
              }
          }
          std::vector<std::pair<int, int>> Gv;
          for (size_t i = 0; i < xxx.size(); i += 2)
          {
              Gv.push_back(std::make_pair(xxx[i], xxx[i + 1]));
          }
          std::vector<int> av;
          int c=0;
          for (const auto &xi : a)
          {
              if (auto ptr = boost::get<int>(&xi))
              {
                  av.push_back( *ptr);
                  c+=*ptr;
              }
          }
          unsigned long fe=feynman_integral_branch_type(Gv, av);
          s=std::to_string(fe);
          //std::cout << " feynman_degree_2 s: " << s << std::endl;
                 ]]>
          </code>
        </module>
      </defun>
      <connect-read port="deg" place="deg"/>
      <connect-in port="a" place="branchtype_2"/>
      <connect-read port="G" place="graph"/>
      <connect-out port="s" place="fey_out_2"/>
    </transition>

    <transition name="Reduce_2">
      <defun>
        <in name="s" type="string"/>
        <inout name="sum" type="string"/>
        <out name="ns" type="control"/>
        <module name="feynman_module" function="plus_2 (ns,s, sum)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="tuple"/>
          <cinclude href="algorithm"/>
          <cinclude href="unordered_map"/>
          <cinclude href="functional"/>
          <cinclude href="cmath"/>
          <cinclude href="sstream"/>
          <cinclude href="stack"/>
          <cinclude href="unordered_set"/>
          <cinclude href="feynman.hpp"/>
          <code><![CDATA[
          unsigned long s1 = std::stoul(s);
          //std::cout << " Reduce_2 s1: " << s1 << std::endl;
          unsigned long s2 = std::stoul(sum);
          //std::cout << " Reduce_2 s2: " << s2 << std::endl;
          unsigned long fe = s1 + s2;
          sum = std::to_string(fe);
          //std::cout << " Reduce_2 sum: " << sum << std::endl;
                 ]]>
          </code>
        </module>
      </defun>
      <connect-in port="s" place="fey_out_2"/>
      <connect-inout port="sum" place="sum_2"/>
      <connect-out port="ns" place="ns"/>
    </transition>

    <transition name="partition_3">
      <defun>
        <in name="control_3" type="control"/>
        <in name="i" type="int"/>
        <in name="n" type="int"/>
        <out name="v" type="list"/>
        <module name="feynman_module" function="gen_block_3(n,i,v,control_3)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="sstream"/>
          <cinclude href="feynman.hpp"/>
          <code><![CDATA[
          vector2d gen=gen_block(n,3);
          for (std::vector<int> ge:gen){
              std::list<pnet::type::value::value_type> temp;
              for (int xi : ge) {
                  temp.push_back(pnet::type::value::value_type(xi));
              }
              v.push_back(temp);
          }
                  ]]>
          </code>
        </module>
      </defun>
      <connect-read port="i" place="degree"/>
      <connect-read port="n" place="N"/>
      <connect-in port="control_3" place="control_3"/>
      <connect-out-many port="v" place="d_vectors_3"/>
    </transition>

    <transition name="Combination_3">
      <defun>
        <in name="v" type="list"/>
        <out name="vec" type="list"/>
        <module name="feynman_module" function="partition_3(v, vec)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="numeric"/>
          <cinclude href="sstream"/>
          <cinclude href="../include/feynman/feynman.hpp"/>
          <code><![CDATA[
          std::vector<int> x;
          for (const auto& elem : v) {
            auto ptr = boost::get<int>(&elem) ;
              x.push_back(*ptr);
          }
          vector2d gen=iterate( x);
          using pnet_value = pnet::type::value::value_type;
          using pnet_list = std::list<pnet_value>;
          for (std::vector<int> &a : gen)
          {
              pnet_list temp_a;
              for (int xi : a)
              {
                  temp_a.push_back(pnet::type::value::value_type(xi));
              }
              vec.push_back(temp_a);
          }
                 ]]>
          </code>
        </module>
      </defun>
      <connect-in port="v" place="d_vectors_3"/>
      <connect-out-many port="vec" place="branchtype_3"/>
    </transition>

    <transition name="feynman_degree_3">
      <defun>
        <in name="deg" type="int"/>
        <in name="a" type="list"/>
        <in name="G" type="list"/>
        <out name="s" type="string"/>
        <module name="feynman_module" function="feynman_integral_degree_3(deg,s,G,a)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="numeric"/>
          <cinclude href="tuple"/>
          <cinclude href="algorithm"/>
          <cinclude href="unordered_map"/>
          <cinclude href="functional"/>
          <cinclude href="cmath"/>
          <cinclude href="sstream"/>
          <cinclude href="stack"/>
          <cinclude href="unordered_set"/>
          <cinclude href="feynman.hpp"/>
          <code><![CDATA[
          std::vector<int> xxx;
          for (const auto &vii : G)
          {
              if (auto ptr = boost::get<int>(&vii))
              {
                  xxx.push_back( *ptr );
              }
          }
          std::vector<std::pair<int, int>> Gv;
          for (size_t i = 0; i < xxx.size(); i += 2)
          {
              Gv.push_back(std::make_pair(xxx[i], xxx[i + 1]));
          }
          std::vector<int> av;
          int c=0;
          for (const auto &xi : a)
          {
              if (auto ptr = boost::get<int>(&xi))
              {
                  av.push_back( *ptr);
                  c+=*ptr;
              }
          }
          unsigned long fe=feynman_integral_branch_type(Gv, av);
          s=std::to_string(fe);
          //std::cout << " feynman_degree_3 s: " << s << std::endl;
                 ]]>
          </code>
        </module>
      </defun>
      <connect-read port="deg" place="deg"/>
      <connect-in port="a" place="branchtype_3"/>
      <connect-read port="G" place="graph"/>
      <connect-out port="s" place="fey_out_3"/>
    </transition>

    <transition name="Reduce_3">
      <defun>
        <in name="s" type="string"/>
        <inout name="sum" type="string"/>
        <out name="ns" type="control"/>
        <module name="feynman_module" function="plus_3 (ns,s, sum)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="tuple"/>
          <cinclude href="algorithm"/>
          <cinclude href="unordered_map"/>
          <cinclude href="functional"/>
          <cinclude href="cmath"/>
          <cinclude href="sstream"/>
          <cinclude href="stack"/>
          <cinclude href="unordered_set"/>
          <cinclude href="feynman.hpp"/>
          <code><![CDATA[
          unsigned long s1 = std::stoul(s);
          //std::cout << " Reduce_3 s1: " << s1 << std::endl;
          unsigned long s2 = std::stoul(sum);
          //std::cout << " Reduce_3 s2: " << s2 << std::endl;
          unsigned long fe = s1 + s2;
          sum = std::to_string(fe);
          //std::cout << " Reduce_3 sum: " << sum << std::endl;
                 ]]>
          </code>
        </module>
      </defun>
      <connect-in port="s" place="fey_out_3"/>
      <connect-inout port="sum" place="sum_3"/>
      <connect-out port="ns" place="ns"/>
    </transition>

    <transition name="partition_4">
      <defun>
        <in name="control_4" type="control"/>
        <in name="i" type="int"/>
        <in name="n" type="int"/>
        <out name="v" type="list"/>
        <module name="feynman_module" function="gen_block_4(n,i,v,control_4)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="sstream"/>
          <cinclude href="feynman.hpp"/>
          <code><![CDATA[
          vector2d gen=gen_block(n,4);
          for (std::vector<int> ge:gen){
              std::list<pnet::type::value::value_type> temp;
              for (int xi : ge) {
                  temp.push_back(pnet::type::value::value_type(xi));
              }
              v.push_back(temp);
          }
                  ]]>
          </code>
        </module>
      </defun>
      <connect-read port="i" place="degree"/>
      <connect-read port="n" place="N"/>
      <connect-in port="control_4" place="control_4"/>
      <connect-out-many port="v" place="d_vectors_4"/>
    </transition>

    <transition name="Combination_4">
      <defun>
        <in name="v" type="list"/>
        <out name="vec" type="list"/>
        <module name="feynman_module" function="partition_4(v, vec)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="numeric"/>
          <cinclude href="sstream"/>
          <cinclude href="../include/feynman/feynman.hpp"/>
          <code><![CDATA[
          std::vector<int> x;
          for (const auto& elem : v) {
            auto ptr = boost::get<int>(&elem) ;
              x.push_back(*ptr);
          }
          vector2d gen=iterate( x);
          using pnet_value = pnet::type::value::value_type;
          using pnet_list = std::list<pnet_value>;
          for (std::vector<int> &a : gen)
          {
              pnet_list temp_a;
              for (int xi : a)
              {
                  temp_a.push_back(pnet::type::value::value_type(xi));
              }
              vec.push_back(temp_a);
          }
                 ]]>
          </code>
        </module>
      </defun>
      <connect-in port="v" place="d_vectors_4"/>
      <connect-out-many port="vec" place="branchtype_4"/>
    </transition>

    <transition name="feynman_degree_4">
      <defun>
        <in name="deg" type="int"/>
        <in name="a" type="list"/>
        <in name="G" type="list"/>
        <out name="s" type="string"/>
        <module name="feynman_module" function="feynman_integral_degree_4(deg,s,G,a)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="numeric"/>
          <cinclude href="tuple"/>
          <cinclude href="algorithm"/>
          <cinclude href="unordered_map"/>
          <cinclude href="functional"/>
          <cinclude href="cmath"/>
          <cinclude href="sstream"/>
          <cinclude href="stack"/>
          <cinclude href="unordered_set"/>
          <cinclude href="feynman.hpp"/>
          <code><![CDATA[
          std::vector<int> xxx;
          for (const auto &vii : G)
          {
              if (auto ptr = boost::get<int>(&vii))
              {
                  xxx.push_back( *ptr );
              }
          }
          std::vector<std::pair<int, int>> Gv;
          for (size_t i = 0; i < xxx.size(); i += 2)
          {
              Gv.push_back(std::make_pair(xxx[i], xxx[i + 1]));
          }
          std::vector<int> av;
          int c=0;
          for (const auto &xi : a)
          {
              if (auto ptr = boost::get<int>(&xi))
              {
                  av.push_back( *ptr);
                  c+=*ptr;
              }
          }
          unsigned long fe=feynman_integral_branch_type(Gv, av);
          s=std::to_string(fe);
          //std::cout << " feynman_degree_4 s: " << s << std::endl;
                 ]]>
          </code>
        </module>
      </defun>
      <connect-read port="deg" place="deg"/>
      <connect-in port="a" place="branchtype_4"/>
      <connect-read port="G" place="graph"/>
      <connect-out port="s" place="fey_out_4"/>
    </transition>

    <transition name="Reduce_4">
      <defun>
        <in name="s" type="string"/>
        <inout name="sum" type="string"/>
        <out name="ns" type="control"/>
        <module name="feynman_module" function="plus_4 (ns,s, sum)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="tuple"/>
          <cinclude href="algorithm"/>
          <cinclude href="unordered_map"/>
          <cinclude href="functional"/>
          <cinclude href="cmath"/>
          <cinclude href="sstream"/>
          <cinclude href="stack"/>
          <cinclude href="unordered_set"/>
          <cinclude href="feynman.hpp"/>
          <code><![CDATA[
          unsigned long s1 = std::stoul(s);
          //std::cout << " Reduce_4 s1: " << s1 << std::endl;
          unsigned long s2 = std::stoul(sum);
          //std::cout << " Reduce_4 s2: " << s2 << std::endl;
          unsigned long fe = s1 + s2;
          sum = std::to_string(fe);
          //std::cout << " Reduce_4 sum: " << sum << std::endl;
                 ]]>
          </code>
        </module>
      </defun>
      <connect-in port="s" place="fey_out_4"/>
      <connect-inout port="sum" place="sum_4"/>
      <connect-out port="ns" place="ns"/>
    </transition>

    <transition name="partition_5">
      <defun>
        <in name="control_5" type="control"/>
        <in name="i" type="int"/>
        <in name="n" type="int"/>
        <out name="v" type="list"/>
        <module name="feynman_module" function="gen_block_5(n,i,v,control_5)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="sstream"/>
          <cinclude href="feynman.hpp"/>
          <code><![CDATA[
          vector2d gen=gen_block(n,5);
          for (std::vector<int> ge:gen){
              std::list<pnet::type::value::value_type> temp;
              for (int xi : ge) {
                  temp.push_back(pnet::type::value::value_type(xi));
              }
              v.push_back(temp);
          }
                  ]]>
          </code>
        </module>
      </defun>
      <connect-read port="i" place="degree"/>
      <connect-read port="n" place="N"/>
      <connect-in port="control_5" place="control_5"/>
      <connect-out-many port="v" place="d_vectors_5"/>
    </transition>

    <transition name="Combination_5">
      <defun>
        <in name="v" type="list"/>
        <out name="vec" type="list"/>
        <module name="feynman_module" function="partition_5(v, vec)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="numeric"/>
          <cinclude href="sstream"/>
          <cinclude href="../include/feynman/feynman.hpp"/>
          <code><![CDATA[
          std::vector<int> x;
          for (const auto& elem : v) {
            auto ptr = boost::get<int>(&elem) ;
              x.push_back(*ptr);
          }
          vector2d gen=iterate( x);
          using pnet_value = pnet::type::value::value_type;
          using pnet_list = std::list<pnet_value>;
          for (std::vector<int> &a : gen)
          {
              pnet_list temp_a;
              for (int xi : a)
              {
                  temp_a.push_back(pnet::type::value::value_type(xi));
              }
              vec.push_back(temp_a);
          }
                 ]]>
          </code>
        </module>
      </defun>
      <connect-in port="v" place="d_vectors_5"/>
      <connect-out-many port="vec" place="branchtype_5"/>
    </transition>

    <transition name="feynman_degree_5">
      <defun>
        <in name="deg" type="int"/>
        <in name="a" type="list"/>
        <in name="G" type="list"/>
        <out name="s" type="string"/>
        <module name="feynman_module" function="feynman_integral_degree_5(deg,s,G,a)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="numeric"/>
          <cinclude href="tuple"/>
          <cinclude href="algorithm"/>
          <cinclude href="unordered_map"/>
          <cinclude href="functional"/>
          <cinclude href="cmath"/>
          <cinclude href="sstream"/>
          <cinclude href="stack"/>
          <cinclude href="unordered_set"/>
          <cinclude href="feynman.hpp"/>
          <code><![CDATA[
          std::vector<int> xxx;
          for (const auto &vii : G)
          {
              if (auto ptr = boost::get<int>(&vii))
              {
                  xxx.push_back( *ptr );
              }
          }
          std::vector<std::pair<int, int>> Gv;
          for (size_t i = 0; i < xxx.size(); i += 2)
          {
              Gv.push_back(std::make_pair(xxx[i], xxx[i + 1]));
          }
          std::vector<int> av;
          int c=0;
          for (const auto &xi : a)
          {
              if (auto ptr = boost::get<int>(&xi))
              {
                  av.push_back( *ptr);
                  c+=*ptr;
              }
          }
          unsigned long fe=feynman_integral_branch_type(Gv, av);
          s=std::to_string(fe);
          //std::cout << " feynman_degree_5 s: " << s << std::endl;
                 ]]>
          </code>
        </module>
      </defun>
      <connect-read port="deg" place="deg"/>
      <connect-in port="a" place="branchtype_5"/>
      <connect-read port="G" place="graph"/>
      <connect-out port="s" place="fey_out_5"/>
    </transition>

    <transition name="Reduce_5">
      <defun>
        <in name="s" type="string"/>
        <inout name="sum" type="string"/>
        <out name="ns" type="control"/>
        <module name="feynman_module" function="plus_5 (ns,s, sum)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="tuple"/>
          <cinclude href="algorithm"/>
          <cinclude href="unordered_map"/>
          <cinclude href="functional"/>
          <cinclude href="cmath"/>
          <cinclude href="sstream"/>
          <cinclude href="stack"/>
          <cinclude href="unordered_set"/>
          <cinclude href="feynman.hpp"/>
          <code><![CDATA[
          unsigned long s1 = std::stoul(s);
          //std::cout << " Reduce_5 s1: " << s1 << std::endl;
          unsigned long s2 = std::stoul(sum);
          //std::cout << " Reduce_5 s2: " << s2 << std::endl;
          unsigned long fe = s1 + s2;
          sum = std::to_string(fe);
          //std::cout << " Reduce_5 sum: " << sum << std::endl;
                 ]]>
          </code>
        </module>
      </defun>
      <connect-in port="s" place="fey_out_5"/>
      <connect-inout port="sum" place="sum_5"/>
      <connect-out port="ns" place="ns"/>
    </transition>

    <transition name="partition_6">
      <defun>
        <in name="control_6" type="control"/>
        <in name="i" type="int"/>
        <in name="n" type="int"/>
        <out name="v" type="list"/>
        <module name="feynman_module" function="gen_block_6(n,i,v,control_6)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="sstream"/>
          <cinclude href="feynman.hpp"/>
          <code><![CDATA[
          vector2d gen=gen_block(n,6);
          for (std::vector<int> ge:gen){
              std::list<pnet::type::value::value_type> temp;
              for (int xi : ge) {
                  temp.push_back(pnet::type::value::value_type(xi));
              }
              v.push_back(temp);
          }
                  ]]>
          </code>
        </module>
      </defun>
      <connect-read port="i" place="degree"/>
      <connect-read port="n" place="N"/>
      <connect-in port="control_6" place="control_6"/>
      <connect-out-many port="v" place="d_vectors_6"/>
    </transition>

    <transition name="Combination_6">
      <defun>
        <in name="v" type="list"/>
        <out name="vec" type="list"/>
        <module name="feynman_module" function="partition_6(v, vec)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="numeric"/>
          <cinclude href="sstream"/>
          <cinclude href="../include/feynman/feynman.hpp"/>
          <code><![CDATA[
          std::vector<int> x;
          for (const auto& elem : v) {
            auto ptr = boost::get<int>(&elem) ;
              x.push_back(*ptr);
          }
          vector2d gen=iterate( x);
          using pnet_value = pnet::type::value::value_type;
          using pnet_list = std::list<pnet_value>;
          for (std::vector<int> &a : gen)
          {
              pnet_list temp_a;
              for (int xi : a)
              {
                  temp_a.push_back(pnet::type::value::value_type(xi));
              }
              vec.push_back(temp_a);
          }
                 ]]>
          </code>
        </module>
      </defun>
      <connect-in port="v" place="d_vectors_6"/>
      <connect-out-many port="vec" place="branchtype_6"/>
    </transition>

    <transition name="feynman_degree_6">
      <defun>
        <in name="deg" type="int"/>
        <in name="a" type="list"/>
        <in name="G" type="list"/>
        <out name="s" type="string"/>
        <module name="feynman_module" function="feynman_integral_degree_6(deg,s,G,a)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="numeric"/>
          <cinclude href="tuple"/>
          <cinclude href="algorithm"/>
          <cinclude href="unordered_map"/>
          <cinclude href="functional"/>
          <cinclude href="cmath"/>
          <cinclude href="sstream"/>
          <cinclude href="stack"/>
          <cinclude href="unordered_set"/>
          <cinclude href="feynman.hpp"/>
          <code><![CDATA[
          std::vector<int> xxx;
          for (const auto &vii : G)
          {
              if (auto ptr = boost::get<int>(&vii))
              {
                  xxx.push_back( *ptr );
              }
          }
          std::vector<std::pair<int, int>> Gv;
          for (size_t i = 0; i < xxx.size(); i += 2)
          {
              Gv.push_back(std::make_pair(xxx[i], xxx[i + 1]));
          }
          std::vector<int> av;
          int c=0;
          for (const auto &xi : a)
          {
              if (auto ptr = boost::get<int>(&xi))
              {
                  av.push_back( *ptr);
                  c+=*ptr;
              }
          }
          unsigned long fe=feynman_integral_branch_type(Gv, av);
          s=std::to_string(fe);
          //std::cout << " feynman_degree_6 s: " << s << std::endl;
                 ]]>
          </code>
        </module>
      </defun>
      <connect-read port="deg" place="deg"/>
      <connect-in port="a" place="branchtype_6"/>
      <connect-read port="G" place="graph"/>
      <connect-out port="s" place="fey_out_6"/>
    </transition>

    <transition name="Reduce_6">
      <defun>
        <in name="s" type="string"/>
        <inout name="sum" type="string"/>
        <out name="ns" type="control"/>
        <module name="feynman_module" function="plus_6 (ns,s, sum)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="tuple"/>
          <cinclude href="algorithm"/>
          <cinclude href="unordered_map"/>
          <cinclude href="functional"/>
          <cinclude href="cmath"/>
          <cinclude href="sstream"/>
          <cinclude href="stack"/>
          <cinclude href="unordered_set"/>
          <cinclude href="feynman.hpp"/>
          <code><![CDATA[
          unsigned long s1 = std::stoul(s);
          //std::cout << " Reduce_6 s1: " << s1 << std::endl;
          unsigned long s2 = std::stoul(sum);
          //std::cout << " Reduce_6 s2: " << s2 << std::endl;
          unsigned long fe = s1 + s2;
          sum = std::to_string(fe);
          //std::cout << " Reduce_6 sum: " << sum << std::endl;
                 ]]>
          </code>
        </module>
      </defun>
      <connect-in port="s" place="fey_out_6"/>
      <connect-inout port="sum" place="sum_6"/>
      <connect-out port="ns" place="ns"/>
    </transition>

    <transition name="partition_7">
      <defun>
        <in name="control_7" type="control"/>
        <in name="i" type="int"/>
        <in name="n" type="int"/>
        <out name="v" type="list"/>
        <module name="feynman_module" function="gen_block_7(n,i,v,control_7)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="sstream"/>
          <cinclude href="feynman.hpp"/>
          <code><![CDATA[
          vector2d gen=gen_block(n,7);
          for (std::vector<int> ge:gen){
              std::list<pnet::type::value::value_type> temp;
              for (int xi : ge) {
                  temp.push_back(pnet::type::value::value_type(xi));
              }
              v.push_back(temp);
          }
                  ]]>
          </code>
        </module>
      </defun>
      <connect-read port="i" place="degree"/>
      <connect-read port="n" place="N"/>
      <connect-in port="control_7" place="control_7"/>
      <connect-out-many port="v" place="d_vectors_7"/>
    </transition>

    <transition name="Combination_7">
      <defun>
        <in name="v" type="list"/>
        <out name="vec" type="list"/>
        <module name="feynman_module" function="partition_7(v, vec)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="numeric"/>
          <cinclude href="sstream"/>
          <cinclude href="../include/feynman/feynman.hpp"/>
          <code><![CDATA[
          std::vector<int> x;
          for (const auto& elem : v) {
            auto ptr = boost::get<int>(&elem) ;
              x.push_back(*ptr);
          }
          vector2d gen=iterate( x);
          using pnet_value = pnet::type::value::value_type;
          using pnet_list = std::list<pnet_value>;
          for (std::vector<int> &a : gen)
          {
              pnet_list temp_a;
              for (int xi : a)
              {
                  temp_a.push_back(pnet::type::value::value_type(xi));
              }
              vec.push_back(temp_a);
          }
                 ]]>
          </code>
        </module>
      </defun>
      <connect-in port="v" place="d_vectors_7"/>
      <connect-out-many port="vec" place="branchtype_7"/>
    </transition>

    <transition name="feynman_degree_7">
      <defun>
        <in name="deg" type="int"/>
        <in name="a" type="list"/>
        <in name="G" type="list"/>
        <out name="s" type="string"/>
        <module name="feynman_module" function="feynman_integral_degree_7(deg,s,G,a)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="numeric"/>
          <cinclude href="tuple"/>
          <cinclude href="algorithm"/>
          <cinclude href="unordered_map"/>
          <cinclude href="functional"/>
          <cinclude href="cmath"/>
          <cinclude href="sstream"/>
          <cinclude href="stack"/>
          <cinclude href="unordered_set"/>
          <cinclude href="feynman.hpp"/>
          <code><![CDATA[
          std::vector<int> xxx;
          for (const auto &vii : G)
          {
              if (auto ptr = boost::get<int>(&vii))
              {
                  xxx.push_back( *ptr );
              }
          }
          std::vector<std::pair<int, int>> Gv;
          for (size_t i = 0; i < xxx.size(); i += 2)
          {
              Gv.push_back(std::make_pair(xxx[i], xxx[i + 1]));
          }
          std::vector<int> av;
          int c=0;
          for (const auto &xi : a)
          {
              if (auto ptr = boost::get<int>(&xi))
              {
                  av.push_back( *ptr);
                  c+=*ptr;
              }
          }
          unsigned long fe=feynman_integral_branch_type(Gv, av);
          s=std::to_string(fe);
          //std::cout << " feynman_degree_7 s: " << s << std::endl;
                 ]]>
          </code>
        </module>
      </defun>
      <connect-read port="deg" place="deg"/>
      <connect-in port="a" place="branchtype_7"/>
      <connect-read port="G" place="graph"/>
      <connect-out port="s" place="fey_out_7"/>
    </transition>

    <transition name="Reduce_7">
      <defun>
        <in name="s" type="string"/>
        <inout name="sum" type="string"/>
        <out name="ns" type="control"/>
        <module name="feynman_module" function="plus_7 (ns,s, sum)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="tuple"/>
          <cinclude href="algorithm"/>
          <cinclude href="unordered_map"/>
          <cinclude href="functional"/>
          <cinclude href="cmath"/>
          <cinclude href="sstream"/>
          <cinclude href="stack"/>
          <cinclude href="unordered_set"/>
          <cinclude href="feynman.hpp"/>
          <code><![CDATA[
          unsigned long s1 = std::stoul(s);
          //std::cout << " Reduce_7 s1: " << s1 << std::endl;
          unsigned long s2 = std::stoul(sum);
          //std::cout << " Reduce_7 s2: " << s2 << std::endl;
          unsigned long fe = s1 + s2;
          sum = std::to_string(fe);
          //std::cout << " Reduce_7 sum: " << sum << std::endl;
                 ]]>
          </code>
        </module>
      </defun>
      <connect-in port="s" place="fey_out_7"/>
      <connect-inout port="sum" place="sum_7"/>
      <connect-out port="ns" place="ns"/>
    </transition>

    <transition name="partition_8">
      <defun>
        <in name="control_8" type="control"/>
        <in name="i" type="int"/>
        <in name="n" type="int"/>
        <out name="v" type="list"/>
        <module name="feynman_module" function="gen_block_8(n,i,v,control_8)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="sstream"/>
          <cinclude href="feynman.hpp"/>
          <code><![CDATA[
          vector2d gen=gen_block(n,8);
          for (std::vector<int> ge:gen){
              std::list<pnet::type::value::value_type> temp;
              for (int xi : ge) {
                  temp.push_back(pnet::type::value::value_type(xi));
              }
              v.push_back(temp);
          }
                  ]]>
          </code>
        </module>
      </defun>
      <connect-read port="i" place="degree"/>
      <connect-read port="n" place="N"/>
      <connect-in port="control_8" place="control_8"/>
      <connect-out-many port="v" place="d_vectors_8"/>
    </transition>

    <transition name="Combination_8">
      <defun>
        <in name="v" type="list"/>
        <out name="vec" type="list"/>
        <module name="feynman_module" function="partition_8(v, vec)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="numeric"/>
          <cinclude href="sstream"/>
          <cinclude href="../include/feynman/feynman.hpp"/>
          <code><![CDATA[
          std::vector<int> x;
          for (const auto& elem : v) {
            auto ptr = boost::get<int>(&elem) ;
              x.push_back(*ptr);
          }
          vector2d gen=iterate( x);
          using pnet_value = pnet::type::value::value_type;
          using pnet_list = std::list<pnet_value>;
          for (std::vector<int> &a : gen)
          {
              pnet_list temp_a;
              for (int xi : a)
              {
                  temp_a.push_back(pnet::type::value::value_type(xi));
              }
              vec.push_back(temp_a);
          }
                 ]]>
          </code>
        </module>
      </defun>
      <connect-in port="v" place="d_vectors_8"/>
      <connect-out-many port="vec" place="branchtype_8"/>
    </transition>

    <transition name="feynman_degree_8">
      <defun>
        <in name="deg" type="int"/>
        <in name="a" type="list"/>
        <in name="G" type="list"/>
        <out name="s" type="string"/>
        <module name="feynman_module" function="feynman_integral_degree_8(deg,s,G,a)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="numeric"/>
          <cinclude href="tuple"/>
          <cinclude href="algorithm"/>
          <cinclude href="unordered_map"/>
          <cinclude href="functional"/>
          <cinclude href="cmath"/>
          <cinclude href="sstream"/>
          <cinclude href="stack"/>
          <cinclude href="unordered_set"/>
          <cinclude href="feynman.hpp"/>
          <code><![CDATA[
          std::vector<int> xxx;
          for (const auto &vii : G)
          {
              if (auto ptr = boost::get<int>(&vii))
              {
                  xxx.push_back( *ptr );
              }
          }
          std::vector<std::pair<int, int>> Gv;
          for (size_t i = 0; i < xxx.size(); i += 2)
          {
              Gv.push_back(std::make_pair(xxx[i], xxx[i + 1]));
          }
          std::vector<int> av;
          int c=0;
          for (const auto &xi : a)
          {
              if (auto ptr = boost::get<int>(&xi))
              {
                  av.push_back( *ptr);
                  c+=*ptr;
              }
          }
          unsigned long fe=feynman_integral_branch_type(Gv, av);
          s=std::to_string(fe);
          //std::cout << " feynman_degree_8 s: " << s << std::endl;
                 ]]>
          </code>
        </module>
      </defun>
      <connect-read port="deg" place="deg"/>
      <connect-in port="a" place="branchtype_8"/>
      <connect-read port="G" place="graph"/>
      <connect-out port="s" place="fey_out_8"/>
    </transition>

    <transition name="Reduce_8">
      <defun>
        <in name="s" type="string"/>
        <inout name="sum" type="string"/>
        <out name="ns" type="control"/>
        <module name="feynman_module" function="plus_8 (ns,s, sum)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="tuple"/>
          <cinclude href="algorithm"/>
          <cinclude href="unordered_map"/>
          <cinclude href="functional"/>
          <cinclude href="cmath"/>
          <cinclude href="sstream"/>
          <cinclude href="stack"/>
          <cinclude href="unordered_set"/>
          <cinclude href="feynman.hpp"/>
          <code><![CDATA[
          unsigned long s1 = std::stoul(s);
          //std::cout << " Reduce_8 s1: " << s1 << std::endl;
          unsigned long s2 = std::stoul(sum);
          //std::cout << " Reduce_8 s2: " << s2 << std::endl;
          unsigned long fe = s1 + s2;
          sum = std::to_string(fe);
          //std::cout << " Reduce_8 sum: " << sum << std::endl;
                 ]]>
          </code>
        </module>
      </defun>
      <connect-in port="s" place="fey_out_8"/>
      <connect-inout port="sum" place="sum_8"/>
      <connect-out port="ns" place="ns"/>
    </transition>

    <transition name="partition_9">
      <defun>
        <in name="control_9" type="control"/>
        <in name="i" type="int"/>
        <in name="n" type="int"/>
        <out name="v" type="list"/>
        <module name="feynman_module" function="gen_block_9(n,i,v,control_9)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="sstream"/>
          <cinclude href="feynman.hpp"/>
          <code><![CDATA[
          vector2d gen=gen_block(n,9);
          for (std::vector<int> ge:gen){
              std::list<pnet::type::value::value_type> temp;
              for (int xi : ge) {
                  temp.push_back(pnet::type::value::value_type(xi));
              }
              v.push_back(temp);
          }
                  ]]>
          </code>
        </module>
      </defun>
      <connect-read port="i" place="degree"/>
      <connect-read port="n" place="N"/>
      <connect-in port="control_9" place="control_9"/>
      <connect-out-many port="v" place="d_vectors_9"/>
    </transition>

    <transition name="Combination_9">
      <defun>
        <in name="v" type="list"/>
        <out name="vec" type="list"/>
        <module name="feynman_module" function="partition_9(v, vec)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="numeric"/>
          <cinclude href="sstream"/>
          <cinclude href="../include/feynman/feynman.hpp"/>
          <code><![CDATA[
          std::vector<int> x;
          for (const auto& elem : v) {
            auto ptr = boost::get<int>(&elem) ;
              x.push_back(*ptr);
          }
          vector2d gen=iterate( x);
          using pnet_value = pnet::type::value::value_type;
          using pnet_list = std::list<pnet_value>;
          for (std::vector<int> &a : gen)
          {
              pnet_list temp_a;
              for (int xi : a)
              {
                  temp_a.push_back(pnet::type::value::value_type(xi));
              }
              vec.push_back(temp_a);
          }
                 ]]>
          </code>
        </module>
      </defun>
      <connect-in port="v" place="d_vectors_9"/>
      <connect-out-many port="vec" place="branchtype_9"/>
    </transition>

    <transition name="feynman_degree_9">
      <defun>
        <in name="deg" type="int"/>
        <in name="a" type="list"/>
        <in name="G" type="list"/>
        <out name="s" type="string"/>
        <module name="feynman_module" function="feynman_integral_degree_9(deg,s,G,a)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="numeric"/>
          <cinclude href="tuple"/>
          <cinclude href="algorithm"/>
          <cinclude href="unordered_map"/>
          <cinclude href="functional"/>
          <cinclude href="cmath"/>
          <cinclude href="sstream"/>
          <cinclude href="stack"/>
          <cinclude href="unordered_set"/>
          <cinclude href="feynman.hpp"/>
          <code><![CDATA[
          std::vector<int> xxx;
          for (const auto &vii : G)
          {
              if (auto ptr = boost::get<int>(&vii))
              {
                  xxx.push_back( *ptr );
              }
          }
          std::vector<std::pair<int, int>> Gv;
          for (size_t i = 0; i < xxx.size(); i += 2)
          {
              Gv.push_back(std::make_pair(xxx[i], xxx[i + 1]));
          }
          std::vector<int> av;
          int c=0;
          for (const auto &xi : a)
          {
              if (auto ptr = boost::get<int>(&xi))
              {
                  av.push_back( *ptr);
                  c+=*ptr;
              }
          }
          unsigned long fe=feynman_integral_branch_type(Gv, av);
          s=std::to_string(fe);
          //std::cout << " feynman_degree_9 s: " << s << std::endl;
                 ]]>
          </code>
        </module>
      </defun>
      <connect-read port="deg" place="deg"/>
      <connect-in port="a" place="branchtype_9"/>
      <connect-read port="G" place="graph"/>
      <connect-out port="s" place="fey_out_9"/>
    </transition>

    <transition name="Reduce_9">
      <defun>
        <in name="s" type="string"/>
        <inout name="sum" type="string"/>
        <out name="ns" type="control"/>
        <module name="feynman_module" function="plus_9 (ns,s, sum)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="tuple"/>
          <cinclude href="algorithm"/>
          <cinclude href="unordered_map"/>
          <cinclude href="functional"/>
          <cinclude href="cmath"/>
          <cinclude href="sstream"/>
          <cinclude href="stack"/>
          <cinclude href="unordered_set"/>
          <cinclude href="feynman.hpp"/>
          <code><![CDATA[
          unsigned long s1 = std::stoul(s);
          //std::cout << " Reduce_9 s1: " << s1 << std::endl;
          unsigned long s2 = std::stoul(sum);
          //std::cout << " Reduce_9 s2: " << s2 << std::endl;
          unsigned long fe = s1 + s2;
          sum = std::to_string(fe);
          //std::cout << " Reduce_9 sum: " << sum << std::endl;
                 ]]>
          </code>
        </module>
      </defun>
      <connect-in port="s" place="fey_out_9"/>
      <connect-inout port="sum" place="sum_9"/>
      <connect-out port="ns" place="ns"/>
    </transition>

    <transition name="partition_10">
      <defun>
        <in name="control_10" type="control"/>
        <in name="i" type="int"/>
        <in name="n" type="int"/>
        <out name="v" type="list"/>
        <module name="feynman_module" function="gen_block_10(n,i,v,control_10)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="sstream"/>
          <cinclude href="feynman.hpp"/>
          <code><![CDATA[
          vector2d gen=gen_block(n,10);
          for (std::vector<int> ge:gen){
              std::list<pnet::type::value::value_type> temp;
              for (int xi : ge) {
                  temp.push_back(pnet::type::value::value_type(xi));
              }
              v.push_back(temp);
          }
                  ]]>
          </code>
        </module>
      </defun>
      <connect-read port="i" place="degree"/>
      <connect-read port="n" place="N"/>
      <connect-in port="control_10" place="control_10"/>
      <connect-out-many port="v" place="d_vectors_10"/>
    </transition>

    <transition name="Combination_10">
      <defun>
        <in name="v" type="list"/>
        <out name="vec" type="list"/>
        <module name="feynman_module" function="partition_10(v, vec)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="numeric"/>
          <cinclude href="sstream"/>
          <cinclude href="../include/feynman/feynman.hpp"/>
          <code><![CDATA[
          std::vector<int> x;
          for (const auto& elem : v) {
            auto ptr = boost::get<int>(&elem) ;
              x.push_back(*ptr);
          }
          vector2d gen=iterate( x);
          using pnet_value = pnet::type::value::value_type;
          using pnet_list = std::list<pnet_value>;
          for (std::vector<int> &a : gen)
          {
              pnet_list temp_a;
              for (int xi : a)
              {
                  temp_a.push_back(pnet::type::value::value_type(xi));
              }
              vec.push_back(temp_a);
          }
                 ]]>
          </code>
        </module>
      </defun>
      <connect-in port="v" place="d_vectors_10"/>
      <connect-out-many port="vec" place="branchtype_10"/>
    </transition>

    <transition name="feynman_degree_10">
      <defun>
        <in name="deg" type="int"/>
        <in name="a" type="list"/>
        <in name="G" type="list"/>
        <out name="s" type="string"/>
        <module name="feynman_module" function="feynman_integral_degree_10(deg,s,G,a)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="numeric"/>
          <cinclude href="tuple"/>
          <cinclude href="algorithm"/>
          <cinclude href="unordered_map"/>
          <cinclude href="functional"/>
          <cinclude href="cmath"/>
          <cinclude href="sstream"/>
          <cinclude href="stack"/>
          <cinclude href="unordered_set"/>
          <cinclude href="feynman.hpp"/>
          <code><![CDATA[
          std::vector<int> xxx;
          for (const auto &vii : G)
          {
              if (auto ptr = boost::get<int>(&vii))
              {
                  xxx.push_back( *ptr );
              }
          }
          std::vector<std::pair<int, int>> Gv;
          for (size_t i = 0; i < xxx.size(); i += 2)
          {
              Gv.push_back(std::make_pair(xxx[i], xxx[i + 1]));
          }
          std::vector<int> av;
          int c=0;
          for (const auto &xi : a)
          {
              if (auto ptr = boost::get<int>(&xi))
              {
                  av.push_back( *ptr);
                  c+=*ptr;
              }
          }
          unsigned long fe=feynman_integral_branch_type(Gv, av);
          s=std::to_string(fe);
          //std::cout << " feynman_degree_10 s: " << s << std::endl;
                 ]]>
          </code>
        </module>
      </defun>
      <connect-read port="deg" place="deg"/>
      <connect-in port="a" place="branchtype_10"/>
      <connect-read port="G" place="graph"/>
      <connect-out port="s" place="fey_out_10"/>
    </transition>

    <transition name="Reduce_10">
      <defun>
        <in name="s" type="string"/>
        <inout name="sum" type="string"/>
        <out name="ns" type="control"/>
        <module name="feynman_module" function="plus_10 (ns,s, sum)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="tuple"/>
          <cinclude href="algorithm"/>
          <cinclude href="unordered_map"/>
          <cinclude href="functional"/>
          <cinclude href="cmath"/>
          <cinclude href="sstream"/>
          <cinclude href="stack"/>
          <cinclude href="unordered_set"/>
          <cinclude href="feynman.hpp"/>
          <code><![CDATA[
          unsigned long s1 = std::stoul(s);
          //std::cout << " Reduce_10 s1: " << s1 << std::endl;
          unsigned long s2 = std::stoul(sum);
          //std::cout << " Reduce_10 s2: " << s2 << std::endl;
          unsigned long fe = s1 + s2;
          sum = std::to_string(fe);
          //std::cout << " Reduce_10 sum: " << sum << std::endl;
                 ]]>
          </code>
        </module>
      </defun>
      <connect-in port="s" place="fey_out_10"/>
      <connect-inout port="sum" place="sum_10"/>
      <connect-out port="ns" place="ns"/>
    </transition>

    <transition name="partition_11">
      <defun>
        <in name="control_11" type="control"/>
        <in name="i" type="int"/>
        <in name="n" type="int"/>
        <out name="v" type="list"/>
        <module name="feynman_module" function="gen_block_11(n,i,v,control_11)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="sstream"/>
          <cinclude href="feynman.hpp"/>
          <code><![CDATA[
          vector2d gen=gen_block(n,11);
          for (std::vector<int> ge:gen){
              std::list<pnet::type::value::value_type> temp;
              for (int xi : ge) {
                  temp.push_back(pnet::type::value::value_type(xi));
              }
              v.push_back(temp);
          }
                  ]]>
          </code>
        </module>
      </defun>
      <connect-read port="i" place="degree"/>
      <connect-read port="n" place="N"/>
      <connect-in port="control_11" place="control_11"/>
      <connect-out-many port="v" place="d_vectors_11"/>
    </transition>

    <transition name="Combination_11">
      <defun>
        <in name="v" type="list"/>
        <out name="vec" type="list"/>
        <module name="feynman_module" function="partition_11(v, vec)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="numeric"/>
          <cinclude href="sstream"/>
          <cinclude href="../include/feynman/feynman.hpp"/>
          <code><![CDATA[
          std::vector<int> x;
          for (const auto& elem : v) {
            auto ptr = boost::get<int>(&elem) ;
              x.push_back(*ptr);
          }
          vector2d gen=iterate( x);
          using pnet_value = pnet::type::value::value_type;
          using pnet_list = std::list<pnet_value>;
          for (std::vector<int> &a : gen)
          {
              pnet_list temp_a;
              for (int xi : a)
              {
                  temp_a.push_back(pnet::type::value::value_type(xi));
              }
              vec.push_back(temp_a);
          }
                 ]]>
          </code>
        </module>
      </defun>
      <connect-in port="v" place="d_vectors_11"/>
      <connect-out-many port="vec" place="branchtype_11"/>
    </transition>

    <transition name="feynman_degree_11">
      <defun>
        <in name="deg" type="int"/>
        <in name="a" type="list"/>
        <in name="G" type="list"/>
        <out name="s" type="string"/>
        <module name="feynman_module" function="feynman_integral_degree_11(deg,s,G,a)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="numeric"/>
          <cinclude href="tuple"/>
          <cinclude href="algorithm"/>
          <cinclude href="unordered_map"/>
          <cinclude href="functional"/>
          <cinclude href="cmath"/>
          <cinclude href="sstream"/>
          <cinclude href="stack"/>
          <cinclude href="unordered_set"/>
          <cinclude href="feynman.hpp"/>
          <code><![CDATA[
          std::vector<int> xxx;
          for (const auto &vii : G)
          {
              if (auto ptr = boost::get<int>(&vii))
              {
                  xxx.push_back( *ptr );
              }
          }
          std::vector<std::pair<int, int>> Gv;
          for (size_t i = 0; i < xxx.size(); i += 2)
          {
              Gv.push_back(std::make_pair(xxx[i], xxx[i + 1]));
          }
          std::vector<int> av;
          int c=0;
          for (const auto &xi : a)
          {
              if (auto ptr = boost::get<int>(&xi))
              {
                  av.push_back( *ptr);
                  c+=*ptr;
              }
          }
          unsigned long fe=feynman_integral_branch_type(Gv, av);
          s=std::to_string(fe);
          //std::cout << " feynman_degree_11 s: " << s << std::endl;
                 ]]>
          </code>
        </module>
      </defun>
      <connect-read port="deg" place="deg"/>
      <connect-in port="a" place="branchtype_11"/>
      <connect-read port="G" place="graph"/>
      <connect-out port="s" place="fey_out_11"/>
    </transition>

    <transition name="Reduce_11">
      <defun>
        <in name="s" type="string"/>
        <inout name="sum" type="string"/>
        <out name="ns" type="control"/>
        <module name="feynman_module" function="plus_11 (ns,s, sum)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="tuple"/>
          <cinclude href="algorithm"/>
          <cinclude href="unordered_map"/>
          <cinclude href="functional"/>
          <cinclude href="cmath"/>
          <cinclude href="sstream"/>
          <cinclude href="stack"/>
          <cinclude href="unordered_set"/>
          <cinclude href="feynman.hpp"/>
          <code><![CDATA[
          unsigned long s1 = std::stoul(s);
          //std::cout << " Reduce_11 s1: " << s1 << std::endl;
          unsigned long s2 = std::stoul(sum);
          //std::cout << " Reduce_11 s2: " << s2 << std::endl;
          unsigned long fe = s1 + s2;
          sum = std::to_string(fe);
          //std::cout << " Reduce_11 sum: " << sum << std::endl;
                 ]]>
          </code>
        </module>
      </defun>
      <connect-in port="s" place="fey_out_11"/>
      <connect-inout port="sum" place="sum_11"/>
      <connect-out port="ns" place="ns"/>
    </transition>

    <transition name="partition_12">
      <defun>
        <in name="control_12" type="control"/>
        <in name="i" type="int"/>
        <in name="n" type="int"/>
        <out name="v" type="list"/>
        <module name="feynman_module" function="gen_block_12(n,i,v,control_12)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="sstream"/>
          <cinclude href="feynman.hpp"/>
          <code><![CDATA[
          vector2d gen=gen_block(n,12);
          for (std::vector<int> ge:gen){
              std::list<pnet::type::value::value_type> temp;
              for (int xi : ge) {
                  temp.push_back(pnet::type::value::value_type(xi));
              }
              v.push_back(temp);
          }
                  ]]>
          </code>
        </module>
      </defun>
      <connect-read port="i" place="degree"/>
      <connect-read port="n" place="N"/>
      <connect-in port="control_12" place="control_12"/>
      <connect-out-many port="v" place="d_vectors_12"/>
    </transition>

    <transition name="Combination_12">
      <defun>
        <in name="v" type="list"/>
        <out name="vec" type="list"/>
        <module name="feynman_module" function="partition_12(v, vec)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="numeric"/>
          <cinclude href="sstream"/>
          <cinclude href="../include/feynman/feynman.hpp"/>
          <code><![CDATA[
          std::vector<int> x;
          for (const auto& elem : v) {
            auto ptr = boost::get<int>(&elem) ;
              x.push_back(*ptr);
          }
          vector2d gen=iterate( x);
          using pnet_value = pnet::type::value::value_type;
          using pnet_list = std::list<pnet_value>;
          for (std::vector<int> &a : gen)
          {
              pnet_list temp_a;
              for (int xi : a)
              {
                  temp_a.push_back(pnet::type::value::value_type(xi));
              }
              vec.push_back(temp_a);
          }
                 ]]>
          </code>
        </module>
      </defun>
      <connect-in port="v" place="d_vectors_12"/>
      <connect-out-many port="vec" place="branchtype_12"/>
    </transition>

    <transition name="feynman_degree_12">
      <defun>
        <in name="deg" type="int"/>
        <in name="a" type="list"/>
        <in name="G" type="list"/>
        <out name="s" type="string"/>
        <module name="feynman_module" function="feynman_integral_degree_12(deg,s,G,a)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="numeric"/>
          <cinclude href="tuple"/>
          <cinclude href="algorithm"/>
          <cinclude href="unordered_map"/>
          <cinclude href="functional"/>
          <cinclude href="cmath"/>
          <cinclude href="sstream"/>
          <cinclude href="stack"/>
          <cinclude href="unordered_set"/>
          <cinclude href="feynman.hpp"/>
          <code><![CDATA[
          std::vector<int> xxx;
          for (const auto &vii : G)
          {
              if (auto ptr = boost::get<int>(&vii))
              {
                  xxx.push_back( *ptr );
              }
          }
          std::vector<std::pair<int, int>> Gv;
          for (size_t i = 0; i < xxx.size(); i += 2)
          {
              Gv.push_back(std::make_pair(xxx[i], xxx[i + 1]));
          }
          std::vector<int> av;
          int c=0;
          for (const auto &xi : a)
          {
              if (auto ptr = boost::get<int>(&xi))
              {
                  av.push_back( *ptr);
                  c+=*ptr;
              }
          }
          unsigned long fe=feynman_integral_branch_type(Gv, av);
          s=std::to_string(fe);
          //std::cout << " feynman_degree_12 s: " << s << std::endl;
                 ]]>
          </code>
        </module>
      </defun>
      <connect-read port="deg" place="deg"/>
      <connect-in port="a" place="branchtype_12"/>
      <connect-read port="G" place="graph"/>
      <connect-out port="s" place="fey_out_12"/>
    </transition>

    <transition name="Reduce_12">
      <defun>
        <in name="s" type="string"/>
        <inout name="sum" type="string"/>
        <out name="ns" type="control"/>
        <module name="feynman_module" function="plus_12 (ns,s, sum)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="tuple"/>
          <cinclude href="algorithm"/>
          <cinclude href="unordered_map"/>
          <cinclude href="functional"/>
          <cinclude href="cmath"/>
          <cinclude href="sstream"/>
          <cinclude href="stack"/>
          <cinclude href="unordered_set"/>
          <cinclude href="feynman.hpp"/>
          <code><![CDATA[
          unsigned long s1 = std::stoul(s);
          //std::cout << " Reduce_12 s1: " << s1 << std::endl;
          unsigned long s2 = std::stoul(sum);
          //std::cout << " Reduce_12 s2: " << s2 << std::endl;
          unsigned long fe = s1 + s2;
          sum = std::to_string(fe);
          //std::cout << " Reduce_12 sum: " << sum << std::endl;
                 ]]>
          </code>
        </module>
      </defun>
      <connect-in port="s" place="fey_out_12"/>
      <connect-inout port="sum" place="sum_12"/>
      <connect-out port="ns" place="ns"/>
    </transition>

    <transition name="partition_13">
      <defun>
        <in name="control_13" type="control"/>
        <in name="i" type="int"/>
        <in name="n" type="int"/>
        <out name="v" type="list"/>
        <module name="feynman_module" function="gen_block_13(n,i,v,control_13)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="sstream"/>
          <cinclude href="feynman.hpp"/>
          <code><![CDATA[
          vector2d gen=gen_block(n,13);
          for (std::vector<int> ge:gen){
              std::list<pnet::type::value::value_type> temp;
              for (int xi : ge) {
                  temp.push_back(pnet::type::value::value_type(xi));
              }
              v.push_back(temp);
          }
                  ]]>
          </code>
        </module>
      </defun>
      <connect-read port="i" place="degree"/>
      <connect-read port="n" place="N"/>
      <connect-in port="control_13" place="control_13"/>
      <connect-out-many port="v" place="d_vectors_13"/>
    </transition>

    <transition name="Combination_13">
      <defun>
        <in name="v" type="list"/>
        <out name="vec" type="list"/>
        <module name="feynman_module" function="partition_13(v, vec)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="numeric"/>
          <cinclude href="sstream"/>
          <cinclude href="../include/feynman/feynman.hpp"/>
          <code><![CDATA[
          std::vector<int> x;
          for (const auto& elem : v) {
            auto ptr = boost::get<int>(&elem) ;
              x.push_back(*ptr);
          }
          vector2d gen=iterate( x);
          using pnet_value = pnet::type::value::value_type;
          using pnet_list = std::list<pnet_value>;
          for (std::vector<int> &a : gen)
          {
              pnet_list temp_a;
              for (int xi : a)
              {
                  temp_a.push_back(pnet::type::value::value_type(xi));
              }
              vec.push_back(temp_a);
          }
                 ]]>
          </code>
        </module>
      </defun>
      <connect-in port="v" place="d_vectors_13"/>
      <connect-out-many port="vec" place="branchtype_13"/>
    </transition>

    <transition name="feynman_degree_13">
      <defun>
        <in name="deg" type="int"/>
        <in name="a" type="list"/>
        <in name="G" type="list"/>
        <out name="s" type="string"/>
        <module name="feynman_module" function="feynman_integral_degree_13(deg,s,G,a)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="numeric"/>
          <cinclude href="tuple"/>
          <cinclude href="algorithm"/>
          <cinclude href="unordered_map"/>
          <cinclude href="functional"/>
          <cinclude href="cmath"/>
          <cinclude href="sstream"/>
          <cinclude href="stack"/>
          <cinclude href="unordered_set"/>
          <cinclude href="feynman.hpp"/>
          <code><![CDATA[
          std::vector<int> xxx;
          for (const auto &vii : G)
          {
              if (auto ptr = boost::get<int>(&vii))
              {
                  xxx.push_back( *ptr );
              }
          }
          std::vector<std::pair<int, int>> Gv;
          for (size_t i = 0; i < xxx.size(); i += 2)
          {
              Gv.push_back(std::make_pair(xxx[i], xxx[i + 1]));
          }
          std::vector<int> av;
          int c=0;
          for (const auto &xi : a)
          {
              if (auto ptr = boost::get<int>(&xi))
              {
                  av.push_back( *ptr);
                  c+=*ptr;
              }
          }
          unsigned long fe=feynman_integral_branch_type(Gv, av);
          s=std::to_string(fe);
          //std::cout << " feynman_degree_13 s: " << s << std::endl;
                 ]]>
          </code>
        </module>
      </defun>
      <connect-read port="deg" place="deg"/>
      <connect-in port="a" place="branchtype_13"/>
      <connect-read port="G" place="graph"/>
      <connect-out port="s" place="fey_out_13"/>
    </transition>

    <transition name="Reduce_13">
      <defun>
        <in name="s" type="string"/>
        <inout name="sum" type="string"/>
        <out name="ns" type="control"/>
        <module name="feynman_module" function="plus_13 (ns,s, sum)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="tuple"/>
          <cinclude href="algorithm"/>
          <cinclude href="unordered_map"/>
          <cinclude href="functional"/>
          <cinclude href="cmath"/>
          <cinclude href="sstream"/>
          <cinclude href="stack"/>
          <cinclude href="unordered_set"/>
          <cinclude href="feynman.hpp"/>
          <code><![CDATA[
          unsigned long s1 = std::stoul(s);
          //std::cout << " Reduce_13 s1: " << s1 << std::endl;
          unsigned long s2 = std::stoul(sum);
          //std::cout << " Reduce_13 s2: " << s2 << std::endl;
          unsigned long fe = s1 + s2;
          sum = std::to_string(fe);
          //std::cout << " Reduce_13 sum: " << sum << std::endl;
                 ]]>
          </code>
        </module>
      </defun>
      <connect-in port="s" place="fey_out_13"/>
      <connect-inout port="sum" place="sum_13"/>
      <connect-out port="ns" place="ns"/>
    </transition>

    <transition name="partition_14">
      <defun>
        <in name="control_14" type="control"/>
        <in name="i" type="int"/>
        <in name="n" type="int"/>
        <out name="v" type="list"/>
        <module name="feynman_module" function="gen_block_14(n,i,v,control_14)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="sstream"/>
          <cinclude href="feynman.hpp"/>
          <code><![CDATA[
          vector2d gen=gen_block(n,14);
          for (std::vector<int> ge:gen){
              std::list<pnet::type::value::value_type> temp;
              for (int xi : ge) {
                  temp.push_back(pnet::type::value::value_type(xi));
              }
              v.push_back(temp);
          }
                  ]]>
          </code>
        </module>
      </defun>
      <connect-read port="i" place="degree"/>
      <connect-read port="n" place="N"/>
      <connect-in port="control_14" place="control_14"/>
      <connect-out-many port="v" place="d_vectors_14"/>
    </transition>

    <transition name="Combination_14">
      <defun>
        <in name="v" type="list"/>
        <out name="vec" type="list"/>
        <module name="feynman_module" function="partition_14(v, vec)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="numeric"/>
          <cinclude href="sstream"/>
          <cinclude href="../include/feynman/feynman.hpp"/>
          <code><![CDATA[
          std::vector<int> x;
          for (const auto& elem : v) {
            auto ptr = boost::get<int>(&elem) ;
              x.push_back(*ptr);
          }
          vector2d gen=iterate( x);
          using pnet_value = pnet::type::value::value_type;
          using pnet_list = std::list<pnet_value>;
          for (std::vector<int> &a : gen)
          {
              pnet_list temp_a;
              for (int xi : a)
              {
                  temp_a.push_back(pnet::type::value::value_type(xi));
              }
              vec.push_back(temp_a);
          }
                 ]]>
          </code>
        </module>
      </defun>
      <connect-in port="v" place="d_vectors_14"/>
      <connect-out-many port="vec" place="branchtype_14"/>
    </transition>

    <transition name="feynman_degree_14">
      <defun>
        <in name="deg" type="int"/>
        <in name="a" type="list"/>
        <in name="G" type="list"/>
        <out name="s" type="string"/>
        <module name="feynman_module" function="feynman_integral_degree_14(deg,s,G,a)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="numeric"/>
          <cinclude href="tuple"/>
          <cinclude href="algorithm"/>
          <cinclude href="unordered_map"/>
          <cinclude href="functional"/>
          <cinclude href="cmath"/>
          <cinclude href="sstream"/>
          <cinclude href="stack"/>
          <cinclude href="unordered_set"/>
          <cinclude href="feynman.hpp"/>
          <code><![CDATA[
          std::vector<int> xxx;
          for (const auto &vii : G)
          {
              if (auto ptr = boost::get<int>(&vii))
              {
                  xxx.push_back( *ptr );
              }
          }
          std::vector<std::pair<int, int>> Gv;
          for (size_t i = 0; i < xxx.size(); i += 2)
          {
              Gv.push_back(std::make_pair(xxx[i], xxx[i + 1]));
          }
          std::vector<int> av;
          int c=0;
          for (const auto &xi : a)
          {
              if (auto ptr = boost::get<int>(&xi))
              {
                  av.push_back( *ptr);
                  c+=*ptr;
              }
          }
          unsigned long fe=feynman_integral_branch_type(Gv, av);
          s=std::to_string(fe);
          //std::cout << " feynman_degree_14 s: " << s << std::endl;
                 ]]>
          </code>
        </module>
      </defun>
      <connect-read port="deg" place="deg"/>
      <connect-in port="a" place="branchtype_14"/>
      <connect-read port="G" place="graph"/>
      <connect-out port="s" place="fey_out_14"/>
    </transition>

    <transition name="Reduce_14">
      <defun>
        <in name="s" type="string"/>
        <inout name="sum" type="string"/>
        <out name="ns" type="control"/>
        <module name="feynman_module" function="plus_14 (ns,s, sum)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="tuple"/>
          <cinclude href="algorithm"/>
          <cinclude href="unordered_map"/>
          <cinclude href="functional"/>
          <cinclude href="cmath"/>
          <cinclude href="sstream"/>
          <cinclude href="stack"/>
          <cinclude href="unordered_set"/>
          <cinclude href="feynman.hpp"/>
          <code><![CDATA[
          unsigned long s1 = std::stoul(s);
          //std::cout << " Reduce_14 s1: " << s1 << std::endl;
          unsigned long s2 = std::stoul(sum);
          //std::cout << " Reduce_14 s2: " << s2 << std::endl;
          unsigned long fe = s1 + s2;
          sum = std::to_string(fe);
          //std::cout << " Reduce_14 sum: " << sum << std::endl;
                 ]]>
          </code>
        </module>
      </defun>
      <connect-in port="s" place="fey_out_14"/>
      <connect-inout port="sum" place="sum_14"/>
      <connect-out port="ns" place="ns"/>
    </transition>

    <transition name="partition_15">
      <defun>
        <in name="control_15" type="control"/>
        <in name="i" type="int"/>
        <in name="n" type="int"/>
        <out name="v" type="list"/>
        <module name="feynman_module" function="gen_block_15(n,i,v,control_15)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="sstream"/>
          <cinclude href="feynman.hpp"/>
          <code><![CDATA[
          vector2d gen=gen_block(n,15);
          for (std::vector<int> ge:gen){
              std::list<pnet::type::value::value_type> temp;
              for (int xi : ge) {
                  temp.push_back(pnet::type::value::value_type(xi));
              }
              v.push_back(temp);
          }
                  ]]>
          </code>
        </module>
      </defun>
      <connect-read port="i" place="degree"/>
      <connect-read port="n" place="N"/>
      <connect-in port="control_15" place="control_15"/>
      <connect-out-many port="v" place="d_vectors_15"/>
    </transition>

    <transition name="Combination_15">
      <defun>
        <in name="v" type="list"/>
        <out name="vec" type="list"/>
        <module name="feynman_module" function="partition_15(v, vec)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="numeric"/>
          <cinclude href="sstream"/>
          <cinclude href="../include/feynman/feynman.hpp"/>
          <code><![CDATA[
          std::vector<int> x;
          for (const auto& elem : v) {
            auto ptr = boost::get<int>(&elem) ;
              x.push_back(*ptr);
          }
          vector2d gen=iterate( x);
          using pnet_value = pnet::type::value::value_type;
          using pnet_list = std::list<pnet_value>;
          for (std::vector<int> &a : gen)
          {
              pnet_list temp_a;
              for (int xi : a)
              {
                  temp_a.push_back(pnet::type::value::value_type(xi));
              }
              vec.push_back(temp_a);
          }
                 ]]>
          </code>
        </module>
      </defun>
      <connect-in port="v" place="d_vectors_15"/>
      <connect-out-many port="vec" place="branchtype_15"/>
    </transition>

    <transition name="feynman_degree_15">
      <defun>
        <in name="deg" type="int"/>
        <in name="a" type="list"/>
        <in name="G" type="list"/>
        <out name="s" type="string"/>
        <module name="feynman_module" function="feynman_integral_degree_15(deg,s,G,a)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="numeric"/>
          <cinclude href="tuple"/>
          <cinclude href="algorithm"/>
          <cinclude href="unordered_map"/>
          <cinclude href="functional"/>
          <cinclude href="cmath"/>
          <cinclude href="sstream"/>
          <cinclude href="stack"/>
          <cinclude href="unordered_set"/>
          <cinclude href="feynman.hpp"/>
          <code><![CDATA[
          std::vector<int> xxx;
          for (const auto &vii : G)
          {
              if (auto ptr = boost::get<int>(&vii))
              {
                  xxx.push_back( *ptr );
              }
          }
          std::vector<std::pair<int, int>> Gv;
          for (size_t i = 0; i < xxx.size(); i += 2)
          {
              Gv.push_back(std::make_pair(xxx[i], xxx[i + 1]));
          }
          std::vector<int> av;
          int c=0;
          for (const auto &xi : a)
          {
              if (auto ptr = boost::get<int>(&xi))
              {
                  av.push_back( *ptr);
                  c+=*ptr;
              }
          }
          unsigned long fe=feynman_integral_branch_type(Gv, av);
          s=std::to_string(fe);
          //std::cout << " feynman_degree_15 s: " << s << std::endl;
                 ]]>
          </code>
        </module>
      </defun>
      <connect-read port="deg" place="deg"/>
      <connect-in port="a" place="branchtype_15"/>
      <connect-read port="G" place="graph"/>
      <connect-out port="s" place="fey_out_15"/>
    </transition>

    <transition name="Reduce_15">
      <defun>
        <in name="s" type="string"/>
        <inout name="sum" type="string"/>
        <out name="ns" type="control"/>
        <module name="feynman_module" function="plus_15 (ns,s, sum)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="tuple"/>
          <cinclude href="algorithm"/>
          <cinclude href="unordered_map"/>
          <cinclude href="functional"/>
          <cinclude href="cmath"/>
          <cinclude href="sstream"/>
          <cinclude href="stack"/>
          <cinclude href="unordered_set"/>
          <cinclude href="feynman.hpp"/>
          <code><![CDATA[
          unsigned long s1 = std::stoul(s);
          //std::cout << " Reduce_15 s1: " << s1 << std::endl;
          unsigned long s2 = std::stoul(sum);
          //std::cout << " Reduce_15 s2: " << s2 << std::endl;
          unsigned long fe = s1 + s2;
          sum = std::to_string(fe);
          //std::cout << " Reduce_15 sum: " << sum << std::endl;
                 ]]>
          </code>
        </module>
      </defun>
      <connect-in port="s" place="fey_out_15"/>
      <connect-inout port="sum" place="sum_15"/>
      <connect-out port="ns" place="ns"/>
    </transition>

    <transition name="partition_16">
      <defun>
        <in name="control_16" type="control"/>
        <in name="i" type="int"/>
        <in name="n" type="int"/>
        <out name="v" type="list"/>
        <module name="feynman_module" function="gen_block_16(n,i,v,control_16)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="sstream"/>
          <cinclude href="feynman.hpp"/>
          <code><![CDATA[
          vector2d gen=gen_block(n,16);
          for (std::vector<int> ge:gen){
              std::list<pnet::type::value::value_type> temp;
              for (int xi : ge) {
                  temp.push_back(pnet::type::value::value_type(xi));
              }
              v.push_back(temp);
          }
                  ]]>
          </code>
        </module>
      </defun>
      <connect-read port="i" place="degree"/>
      <connect-read port="n" place="N"/>
      <connect-in port="control_16" place="control_16"/>
      <connect-out-many port="v" place="d_vectors_16"/>
    </transition>

    <transition name="Combination_16">
      <defun>
        <in name="v" type="list"/>
        <out name="vec" type="list"/>
        <module name="feynman_module" function="partition_16(v, vec)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="numeric"/>
          <cinclude href="sstream"/>
          <cinclude href="../include/feynman/feynman.hpp"/>
          <code><![CDATA[
          std::vector<int> x;
          for (const auto& elem : v) {
            auto ptr = boost::get<int>(&elem) ;
              x.push_back(*ptr);
          }
          vector2d gen=iterate( x);
          using pnet_value = pnet::type::value::value_type;
          using pnet_list = std::list<pnet_value>;
          for (std::vector<int> &a : gen)
          {
              pnet_list temp_a;
              for (int xi : a)
              {
                  temp_a.push_back(pnet::type::value::value_type(xi));
              }
              vec.push_back(temp_a);
          }
                 ]]>
          </code>
        </module>
      </defun>
      <connect-in port="v" place="d_vectors_16"/>
      <connect-out-many port="vec" place="branchtype_16"/>
    </transition>

    <transition name="feynman_degree_16">
      <defun>
        <in name="deg" type="int"/>
        <in name="a" type="list"/>
        <in name="G" type="list"/>
        <out name="s" type="string"/>
        <module name="feynman_module" function="feynman_integral_degree_16(deg,s,G,a)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="numeric"/>
          <cinclude href="tuple"/>
          <cinclude href="algorithm"/>
          <cinclude href="unordered_map"/>
          <cinclude href="functional"/>
          <cinclude href="cmath"/>
          <cinclude href="sstream"/>
          <cinclude href="stack"/>
          <cinclude href="unordered_set"/>
          <cinclude href="feynman.hpp"/>
          <code><![CDATA[
          std::vector<int> xxx;
          for (const auto &vii : G)
          {
              if (auto ptr = boost::get<int>(&vii))
              {
                  xxx.push_back( *ptr );
              }
          }
          std::vector<std::pair<int, int>> Gv;
          for (size_t i = 0; i < xxx.size(); i += 2)
          {
              Gv.push_back(std::make_pair(xxx[i], xxx[i + 1]));
          }
          std::vector<int> av;
          int c=0;
          for (const auto &xi : a)
          {
              if (auto ptr = boost::get<int>(&xi))
              {
                  av.push_back( *ptr);
                  c+=*ptr;
              }
          }
          unsigned long fe=feynman_integral_branch_type(Gv, av);
          s=std::to_string(fe);
          //std::cout << " feynman_degree_16 s: " << s << std::endl;
                 ]]>
          </code>
        </module>
      </defun>
      <connect-read port="deg" place="deg"/>
      <connect-in port="a" place="branchtype_16"/>
      <connect-read port="G" place="graph"/>
      <connect-out port="s" place="fey_out_16"/>
    </transition>

    <transition name="Reduce_16">
      <defun>
        <in name="s" type="string"/>
        <inout name="sum" type="string"/>
        <out name="ns" type="control"/>
        <module name="feynman_module" function="plus_16 (ns,s, sum)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="tuple"/>
          <cinclude href="algorithm"/>
          <cinclude href="unordered_map"/>
          <cinclude href="functional"/>
          <cinclude href="cmath"/>
          <cinclude href="sstream"/>
          <cinclude href="stack"/>
          <cinclude href="unordered_set"/>
          <cinclude href="feynman.hpp"/>
          <code><![CDATA[
          unsigned long s1 = std::stoul(s);
          //std::cout << " Reduce_16 s1: " << s1 << std::endl;
          unsigned long s2 = std::stoul(sum);
          //std::cout << " Reduce_16 s2: " << s2 << std::endl;
          unsigned long fe = s1 + s2;
          sum = std::to_string(fe);
          //std::cout << " Reduce_16 sum: " << sum << std::endl;
                 ]]>
          </code>
        </module>
      </defun>
      <connect-in port="s" place="fey_out_16"/>
      <connect-inout port="sum" place="sum_16"/>
      <connect-out port="ns" place="ns"/>
    </transition>

    <transition name="partition_17">
      <defun>
        <in name="control_17" type="control"/>
        <in name="i" type="int"/>
        <in name="n" type="int"/>
        <out name="v" type="list"/>
        <module name="feynman_module" function="gen_block_17(n,i,v,control_17)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="sstream"/>
          <cinclude href="feynman.hpp"/>
          <code><![CDATA[
          vector2d gen=gen_block(n,17);
          for (std::vector<int> ge:gen){
              std::list<pnet::type::value::value_type> temp;
              for (int xi : ge) {
                  temp.push_back(pnet::type::value::value_type(xi));
              }
              v.push_back(temp);
          }
                  ]]>
          </code>
        </module>
      </defun>
      <connect-read port="i" place="degree"/>
      <connect-read port="n" place="N"/>
      <connect-in port="control_17" place="control_17"/>
      <connect-out-many port="v" place="d_vectors_17"/>
    </transition>

    <transition name="Combination_17">
      <defun>
        <in name="v" type="list"/>
        <out name="vec" type="list"/>
        <module name="feynman_module" function="partition_17(v, vec)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="numeric"/>
          <cinclude href="sstream"/>
          <cinclude href="../include/feynman/feynman.hpp"/>
          <code><![CDATA[
          std::vector<int> x;
          for (const auto& elem : v) {
            auto ptr = boost::get<int>(&elem) ;
              x.push_back(*ptr);
          }
          vector2d gen=iterate( x);
          using pnet_value = pnet::type::value::value_type;
          using pnet_list = std::list<pnet_value>;
          for (std::vector<int> &a : gen)
          {
              pnet_list temp_a;
              for (int xi : a)
              {
                  temp_a.push_back(pnet::type::value::value_type(xi));
              }
              vec.push_back(temp_a);
          }
                 ]]>
          </code>
        </module>
      </defun>
      <connect-in port="v" place="d_vectors_17"/>
      <connect-out-many port="vec" place="branchtype_17"/>
    </transition>

    <transition name="feynman_degree_17">
      <defun>
        <in name="deg" type="int"/>
        <in name="a" type="list"/>
        <in name="G" type="list"/>
        <out name="s" type="string"/>
        <module name="feynman_module" function="feynman_integral_degree_17(deg,s,G,a)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="numeric"/>
          <cinclude href="tuple"/>
          <cinclude href="algorithm"/>
          <cinclude href="unordered_map"/>
          <cinclude href="functional"/>
          <cinclude href="cmath"/>
          <cinclude href="sstream"/>
          <cinclude href="stack"/>
          <cinclude href="unordered_set"/>
          <cinclude href="feynman.hpp"/>
          <code><![CDATA[
          std::vector<int> xxx;
          for (const auto &vii : G)
          {
              if (auto ptr = boost::get<int>(&vii))
              {
                  xxx.push_back( *ptr );
              }
          }
          std::vector<std::pair<int, int>> Gv;
          for (size_t i = 0; i < xxx.size(); i += 2)
          {
              Gv.push_back(std::make_pair(xxx[i], xxx[i + 1]));
          }
          std::vector<int> av;
          int c=0;
          for (const auto &xi : a)
          {
              if (auto ptr = boost::get<int>(&xi))
              {
                  av.push_back( *ptr);
                  c+=*ptr;
              }
          }
          unsigned long fe=feynman_integral_branch_type(Gv, av);
          s=std::to_string(fe);
          //std::cout << " feynman_degree_17 s: " << s << std::endl;
                 ]]>
          </code>
        </module>
      </defun>
      <connect-read port="deg" place="deg"/>
      <connect-in port="a" place="branchtype_17"/>
      <connect-read port="G" place="graph"/>
      <connect-out port="s" place="fey_out_17"/>
    </transition>

    <transition name="Reduce_17">
      <defun>
        <in name="s" type="string"/>
        <inout name="sum" type="string"/>
        <out name="ns" type="control"/>
        <module name="feynman_module" function="plus_17 (ns,s, sum)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="tuple"/>
          <cinclude href="algorithm"/>
          <cinclude href="unordered_map"/>
          <cinclude href="functional"/>
          <cinclude href="cmath"/>
          <cinclude href="sstream"/>
          <cinclude href="stack"/>
          <cinclude href="unordered_set"/>
          <cinclude href="feynman.hpp"/>
          <code><![CDATA[
          unsigned long s1 = std::stoul(s);
          //std::cout << " Reduce_17 s1: " << s1 << std::endl;
          unsigned long s2 = std::stoul(sum);
          //std::cout << " Reduce_17 s2: " << s2 << std::endl;
          unsigned long fe = s1 + s2;
          sum = std::to_string(fe);
          //std::cout << " Reduce_17 sum: " << sum << std::endl;
                 ]]>
          </code>
        </module>
      </defun>
      <connect-in port="s" place="fey_out_17"/>
      <connect-inout port="sum" place="sum_17"/>
      <connect-out port="ns" place="ns"/>
    </transition>

    <transition name="partition_18">
      <defun>
        <in name="control_18" type="control"/>
        <in name="i" type="int"/>
        <in name="n" type="int"/>
        <out name="v" type="list"/>
        <module name="feynman_module" function="gen_block_18(n,i,v,control_18)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="sstream"/>
          <cinclude href="feynman.hpp"/>
          <code><![CDATA[
          vector2d gen=gen_block(n,18);
          for (std::vector<int> ge:gen){
              std::list<pnet::type::value::value_type> temp;
              for (int xi : ge) {
                  temp.push_back(pnet::type::value::value_type(xi));
              }
              v.push_back(temp);
          }
                  ]]>
          </code>
        </module>
      </defun>
      <connect-read port="i" place="degree"/>
      <connect-read port="n" place="N"/>
      <connect-in port="control_18" place="control_18"/>
      <connect-out-many port="v" place="d_vectors_18"/>
    </transition>

    <transition name="Combination_18">
      <defun>
        <in name="v" type="list"/>
        <out name="vec" type="list"/>
        <module name="feynman_module" function="partition_18(v, vec)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="numeric"/>
          <cinclude href="sstream"/>
          <cinclude href="../include/feynman/feynman.hpp"/>
          <code><![CDATA[
          std::vector<int> x;
          for (const auto& elem : v) {
            auto ptr = boost::get<int>(&elem) ;
              x.push_back(*ptr);
          }
          vector2d gen=iterate( x);
          using pnet_value = pnet::type::value::value_type;
          using pnet_list = std::list<pnet_value>;
          for (std::vector<int> &a : gen)
          {
              pnet_list temp_a;
              for (int xi : a)
              {
                  temp_a.push_back(pnet::type::value::value_type(xi));
              }
              vec.push_back(temp_a);
          }
                 ]]>
          </code>
        </module>
      </defun>
      <connect-in port="v" place="d_vectors_18"/>
      <connect-out-many port="vec" place="branchtype_18"/>
    </transition>

    <transition name="feynman_degree_18">
      <defun>
        <in name="deg" type="int"/>
        <in name="a" type="list"/>
        <in name="G" type="list"/>
        <out name="s" type="string"/>
        <module name="feynman_module" function="feynman_integral_degree_18(deg,s,G,a)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="numeric"/>
          <cinclude href="tuple"/>
          <cinclude href="algorithm"/>
          <cinclude href="unordered_map"/>
          <cinclude href="functional"/>
          <cinclude href="cmath"/>
          <cinclude href="sstream"/>
          <cinclude href="stack"/>
          <cinclude href="unordered_set"/>
          <cinclude href="feynman.hpp"/>
          <code><![CDATA[
          std::vector<int> xxx;
          for (const auto &vii : G)
          {
              if (auto ptr = boost::get<int>(&vii))
              {
                  xxx.push_back( *ptr );
              }
          }
          std::vector<std::pair<int, int>> Gv;
          for (size_t i = 0; i < xxx.size(); i += 2)
          {
              Gv.push_back(std::make_pair(xxx[i], xxx[i + 1]));
          }
          std::vector<int> av;
          int c=0;
          for (const auto &xi : a)
          {
              if (auto ptr = boost::get<int>(&xi))
              {
                  av.push_back( *ptr);
                  c+=*ptr;
              }
          }
          unsigned long fe=feynman_integral_branch_type(Gv, av);
          s=std::to_string(fe);
          //std::cout << " feynman_degree_18 s: " << s << std::endl;
                 ]]>
          </code>
        </module>
      </defun>
      <connect-read port="deg" place="deg"/>
      <connect-in port="a" place="branchtype_18"/>
      <connect-read port="G" place="graph"/>
      <connect-out port="s" place="fey_out_18"/>
    </transition>

    <transition name="Reduce_18">
      <defun>
        <in name="s" type="string"/>
        <inout name="sum" type="string"/>
        <out name="ns" type="control"/>
        <module name="feynman_module" function="plus_18 (ns,s, sum)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="tuple"/>
          <cinclude href="algorithm"/>
          <cinclude href="unordered_map"/>
          <cinclude href="functional"/>
          <cinclude href="cmath"/>
          <cinclude href="sstream"/>
          <cinclude href="stack"/>
          <cinclude href="unordered_set"/>
          <cinclude href="feynman.hpp"/>
          <code><![CDATA[
          unsigned long s1 = std::stoul(s);
          //std::cout << " Reduce_18 s1: " << s1 << std::endl;
          unsigned long s2 = std::stoul(sum);
          //std::cout << " Reduce_18 s2: " << s2 << std::endl;
          unsigned long fe = s1 + s2;
          sum = std::to_string(fe);
          //std::cout << " Reduce_18 sum: " << sum << std::endl;
                 ]]>
          </code>
        </module>
      </defun>
      <connect-in port="s" place="fey_out_18"/>
      <connect-inout port="sum" place="sum_18"/>
      <connect-out port="ns" place="ns"/>
    </transition>

    <transition name="partition_19">
      <defun>
        <in name="control_19" type="control"/>
        <in name="i" type="int"/>
        <in name="n" type="int"/>
        <out name="v" type="list"/>
        <module name="feynman_module" function="gen_block_19(n,i,v,control_19)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="sstream"/>
          <cinclude href="feynman.hpp"/>
          <code><![CDATA[
          vector2d gen=gen_block(n,19);
          for (std::vector<int> ge:gen){
              std::list<pnet::type::value::value_type> temp;
              for (int xi : ge) {
                  temp.push_back(pnet::type::value::value_type(xi));
              }
              v.push_back(temp);
          }
                  ]]>
          </code>
        </module>
      </defun>
      <connect-read port="i" place="degree"/>
      <connect-read port="n" place="N"/>
      <connect-in port="control_19" place="control_19"/>
      <connect-out-many port="v" place="d_vectors_19"/>
    </transition>

    <transition name="Combination_19">
      <defun>
        <in name="v" type="list"/>
        <out name="vec" type="list"/>
        <module name="feynman_module" function="partition_19(v, vec)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="numeric"/>
          <cinclude href="sstream"/>
          <cinclude href="../include/feynman/feynman.hpp"/>
          <code><![CDATA[
          std::vector<int> x;
          for (const auto& elem : v) {
            auto ptr = boost::get<int>(&elem) ;
              x.push_back(*ptr);
          }
          vector2d gen=iterate( x);
          using pnet_value = pnet::type::value::value_type;
          using pnet_list = std::list<pnet_value>;
          for (std::vector<int> &a : gen)
          {
              pnet_list temp_a;
              for (int xi : a)
              {
                  temp_a.push_back(pnet::type::value::value_type(xi));
              }
              vec.push_back(temp_a);
          }
                 ]]>
          </code>
        </module>
      </defun>
      <connect-in port="v" place="d_vectors_19"/>
      <connect-out-many port="vec" place="branchtype_19"/>
    </transition>

    <transition name="feynman_degree_19">
      <defun>
        <in name="deg" type="int"/>
        <in name="a" type="list"/>
        <in name="G" type="list"/>
        <out name="s" type="string"/>
        <module name="feynman_module" function="feynman_integral_degree_19(deg,s,G,a)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="numeric"/>
          <cinclude href="tuple"/>
          <cinclude href="algorithm"/>
          <cinclude href="unordered_map"/>
          <cinclude href="functional"/>
          <cinclude href="cmath"/>
          <cinclude href="sstream"/>
          <cinclude href="stack"/>
          <cinclude href="unordered_set"/>
          <cinclude href="feynman.hpp"/>
          <code><![CDATA[
          std::vector<int> xxx;
          for (const auto &vii : G)
          {
              if (auto ptr = boost::get<int>(&vii))
              {
                  xxx.push_back( *ptr );
              }
          }
          std::vector<std::pair<int, int>> Gv;
          for (size_t i = 0; i < xxx.size(); i += 2)
          {
              Gv.push_back(std::make_pair(xxx[i], xxx[i + 1]));
          }
          std::vector<int> av;
          int c=0;
          for (const auto &xi : a)
          {
              if (auto ptr = boost::get<int>(&xi))
              {
                  av.push_back( *ptr);
                  c+=*ptr;
              }
          }
          unsigned long fe=feynman_integral_branch_type(Gv, av);
          s=std::to_string(fe);
          //std::cout << " feynman_degree_19 s: " << s << std::endl;
                 ]]>
          </code>
        </module>
      </defun>
      <connect-read port="deg" place="deg"/>
      <connect-in port="a" place="branchtype_19"/>
      <connect-read port="G" place="graph"/>
      <connect-out port="s" place="fey_out_19"/>
    </transition>

    <transition name="Reduce_19">
      <defun>
        <in name="s" type="string"/>
        <inout name="sum" type="string"/>
        <out name="ns" type="control"/>
        <module name="feynman_module" function="plus_19 (ns,s, sum)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="tuple"/>
          <cinclude href="algorithm"/>
          <cinclude href="unordered_map"/>
          <cinclude href="functional"/>
          <cinclude href="cmath"/>
          <cinclude href="sstream"/>
          <cinclude href="stack"/>
          <cinclude href="unordered_set"/>
          <cinclude href="feynman.hpp"/>
          <code><![CDATA[
          unsigned long s1 = std::stoul(s);
          //std::cout << " Reduce_19 s1: " << s1 << std::endl;
          unsigned long s2 = std::stoul(sum);
          //std::cout << " Reduce_19 s2: " << s2 << std::endl;
          unsigned long fe = s1 + s2;
          sum = std::to_string(fe);
          //std::cout << " Reduce_19 sum: " << sum << std::endl;
                 ]]>
          </code>
        </module>
      </defun>
      <connect-in port="s" place="fey_out_19"/>
      <connect-inout port="sum" place="sum_19"/>
      <connect-out port="ns" place="ns"/>
    </transition>

    <transition name="partition_20">
      <defun>
        <in name="control_20" type="control"/>
        <in name="i" type="int"/>
        <in name="n" type="int"/>
        <out name="v" type="list"/>
        <module name="feynman_module" function="gen_block_20(n,i,v,control_20)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="sstream"/>
          <cinclude href="feynman.hpp"/>
          <code><![CDATA[
          vector2d gen=gen_block(n,20);
          for (std::vector<int> ge:gen){
              std::list<pnet::type::value::value_type> temp;
              for (int xi : ge) {
                  temp.push_back(pnet::type::value::value_type(xi));
              }
              v.push_back(temp);
          }
                  ]]>
          </code>
        </module>
      </defun>
      <connect-read port="i" place="degree"/>
      <connect-read port="n" place="N"/>
      <connect-in port="control_20" place="control_20"/>
      <connect-out-many port="v" place="d_vectors_20"/>
    </transition>

    <transition name="Combination_20">
      <defun>
        <in name="v" type="list"/>
        <out name="vec" type="list"/>
        <module name="feynman_module" function="partition_20(v, vec)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="numeric"/>
          <cinclude href="sstream"/>
          <cinclude href="../include/feynman/feynman.hpp"/>
          <code><![CDATA[
          std::vector<int> x;
          for (const auto& elem : v) {
            auto ptr = boost::get<int>(&elem) ;
              x.push_back(*ptr);
          }
          vector2d gen=iterate( x);
          using pnet_value = pnet::type::value::value_type;
          using pnet_list = std::list<pnet_value>;
          for (std::vector<int> &a : gen)
          {
              pnet_list temp_a;
              for (int xi : a)
              {
                  temp_a.push_back(pnet::type::value::value_type(xi));
              }
              vec.push_back(temp_a);
          }
                 ]]>
          </code>
        </module>
      </defun>
      <connect-in port="v" place="d_vectors_20"/>
      <connect-out-many port="vec" place="branchtype_20"/>
    </transition>

    <transition name="feynman_degree_20">
      <defun>
        <in name="deg" type="int"/>
        <in name="a" type="list"/>
        <in name="G" type="list"/>
        <out name="s" type="string"/>
        <module name="feynman_module" function="feynman_integral_degree_20(deg,s,G,a)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="numeric"/>
          <cinclude href="tuple"/>
          <cinclude href="algorithm"/>
          <cinclude href="unordered_map"/>
          <cinclude href="functional"/>
          <cinclude href="cmath"/>
          <cinclude href="sstream"/>
          <cinclude href="stack"/>
          <cinclude href="unordered_set"/>
          <cinclude href="feynman.hpp"/>
          <code><![CDATA[
          std::vector<int> xxx;
          for (const auto &vii : G)
          {
              if (auto ptr = boost::get<int>(&vii))
              {
                  xxx.push_back( *ptr );
              }
          }
          std::vector<std::pair<int, int>> Gv;
          for (size_t i = 0; i < xxx.size(); i += 2)
          {
              Gv.push_back(std::make_pair(xxx[i], xxx[i + 1]));
          }
          std::vector<int> av;
          int c=0;
          for (const auto &xi : a)
          {
              if (auto ptr = boost::get<int>(&xi))
              {
                  av.push_back( *ptr);
                  c+=*ptr;
              }
          }
          unsigned long fe=feynman_integral_branch_type(Gv, av);
          s=std::to_string(fe);
          //std::cout << " feynman_degree_20 s: " << s << std::endl;
                 ]]>
          </code>
        </module>
      </defun>
      <connect-read port="deg" place="deg"/>
      <connect-in port="a" place="branchtype_20"/>
      <connect-read port="G" place="graph"/>
      <connect-out port="s" place="fey_out_20"/>
    </transition>

    <transition name="Reduce_20">
      <defun>
        <in name="s" type="string"/>
        <inout name="sum" type="string"/>
        <out name="ns" type="control"/>
        <module name="feynman_module" function="plus_20 (ns,s, sum)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="tuple"/>
          <cinclude href="algorithm"/>
          <cinclude href="unordered_map"/>
          <cinclude href="functional"/>
          <cinclude href="cmath"/>
          <cinclude href="sstream"/>
          <cinclude href="stack"/>
          <cinclude href="unordered_set"/>
          <cinclude href="feynman.hpp"/>
          <code><![CDATA[
          unsigned long s1 = std::stoul(s);
          //std::cout << " Reduce_20 s1: " << s1 << std::endl;
          unsigned long s2 = std::stoul(sum);
          //std::cout << " Reduce_20 s2: " << s2 << std::endl;
          unsigned long fe = s1 + s2;
          sum = std::to_string(fe);
          //std::cout << " Reduce_20 sum: " << sum << std::endl;
                 ]]>
          </code>
        </module>
      </defun>
      <connect-in port="s" place="fey_out_20"/>
      <connect-inout port="sum" place="sum_20"/>
      <connect-out port="ns" place="ns"/>
    </transition>

    <transition name="partition_21">
      <defun>
        <in name="control_21" type="control"/>
        <in name="i" type="int"/>
        <in name="n" type="int"/>
        <out name="v" type="list"/>
        <module name="feynman_module" function="gen_block_21(n,i,v,control_21)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="sstream"/>
          <cinclude href="feynman.hpp"/>
          <code><![CDATA[
          vector2d gen=gen_block(n,21);
          for (std::vector<int> ge:gen){
              std::list<pnet::type::value::value_type> temp;
              for (int xi : ge) {
                  temp.push_back(pnet::type::value::value_type(xi));
              }
              v.push_back(temp);
          }
                  ]]>
          </code>
        </module>
      </defun>
      <connect-read port="i" place="degree"/>
      <connect-read port="n" place="N"/>
      <connect-in port="control_21" place="control_21"/>
      <connect-out-many port="v" place="d_vectors_21"/>
    </transition>

    <transition name="Combination_21">
      <defun>
        <in name="v" type="list"/>
        <out name="vec" type="list"/>
        <module name="feynman_module" function="partition_21(v, vec)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="numeric"/>
          <cinclude href="sstream"/>
          <cinclude href="../include/feynman/feynman.hpp"/>
          <code><![CDATA[
          std::vector<int> x;
          for (const auto& elem : v) {
            auto ptr = boost::get<int>(&elem) ;
              x.push_back(*ptr);
          }
          vector2d gen=iterate( x);
          using pnet_value = pnet::type::value::value_type;
          using pnet_list = std::list<pnet_value>;
          for (std::vector<int> &a : gen)
          {
              pnet_list temp_a;
              for (int xi : a)
              {
                  temp_a.push_back(pnet::type::value::value_type(xi));
              }
              vec.push_back(temp_a);
          }
                 ]]>
          </code>
        </module>
      </defun>
      <connect-in port="v" place="d_vectors_21"/>
      <connect-out-many port="vec" place="branchtype_21"/>
    </transition>

    <transition name="feynman_degree_21">
      <defun>
        <in name="deg" type="int"/>
        <in name="a" type="list"/>
        <in name="G" type="list"/>
        <out name="s" type="string"/>
        <module name="feynman_module" function="feynman_integral_degree_21(deg,s,G,a)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="numeric"/>
          <cinclude href="tuple"/>
          <cinclude href="algorithm"/>
          <cinclude href="unordered_map"/>
          <cinclude href="functional"/>
          <cinclude href="cmath"/>
          <cinclude href="sstream"/>
          <cinclude href="stack"/>
          <cinclude href="unordered_set"/>
          <cinclude href="feynman.hpp"/>
          <code><![CDATA[
          std::vector<int> xxx;
          for (const auto &vii : G)
          {
              if (auto ptr = boost::get<int>(&vii))
              {
                  xxx.push_back( *ptr );
              }
          }
          std::vector<std::pair<int, int>> Gv;
          for (size_t i = 0; i < xxx.size(); i += 2)
          {
              Gv.push_back(std::make_pair(xxx[i], xxx[i + 1]));
          }
          std::vector<int> av;
          int c=0;
          for (const auto &xi : a)
          {
              if (auto ptr = boost::get<int>(&xi))
              {
                  av.push_back( *ptr);
                  c+=*ptr;
              }
          }
          unsigned long fe=feynman_integral_branch_type(Gv, av);
          s=std::to_string(fe);
          //std::cout << " feynman_degree_21 s: " << s << std::endl;
                 ]]>
          </code>
        </module>
      </defun>
      <connect-read port="deg" place="deg"/>
      <connect-in port="a" place="branchtype_21"/>
      <connect-read port="G" place="graph"/>
      <connect-out port="s" place="fey_out_21"/>
    </transition>

    <transition name="Reduce_21">
      <defun>
        <in name="s" type="string"/>
        <inout name="sum" type="string"/>
        <out name="ns" type="control"/>
        <module name="feynman_module" function="plus_21 (ns,s, sum)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="tuple"/>
          <cinclude href="algorithm"/>
          <cinclude href="unordered_map"/>
          <cinclude href="functional"/>
          <cinclude href="cmath"/>
          <cinclude href="sstream"/>
          <cinclude href="stack"/>
          <cinclude href="unordered_set"/>
          <cinclude href="feynman.hpp"/>
          <code><![CDATA[
          unsigned long s1 = std::stoul(s);
          //std::cout << " Reduce_21 s1: " << s1 << std::endl;
          unsigned long s2 = std::stoul(sum);
          //std::cout << " Reduce_21 s2: " << s2 << std::endl;
          unsigned long fe = s1 + s2;
          sum = std::to_string(fe);
          //std::cout << " Reduce_21 sum: " << sum << std::endl;
                 ]]>
          </code>
        </module>
      </defun>
      <connect-in port="s" place="fey_out_21"/>
      <connect-inout port="sum" place="sum_21"/>
      <connect-out port="ns" place="ns"/>
    </transition>

    <transition name="partition_22">
      <defun>
        <in name="control_22" type="control"/>
        <in name="i" type="int"/>
        <in name="n" type="int"/>
        <out name="v" type="list"/>
        <module name="feynman_module" function="gen_block_22(n,i,v,control_22)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="sstream"/>
          <cinclude href="feynman.hpp"/>
          <code><![CDATA[
          vector2d gen=gen_block(n,22);
          for (std::vector<int> ge:gen){
              std::list<pnet::type::value::value_type> temp;
              for (int xi : ge) {
                  temp.push_back(pnet::type::value::value_type(xi));
              }
              v.push_back(temp);
          }
                  ]]>
          </code>
        </module>
      </defun>
      <connect-read port="i" place="degree"/>
      <connect-read port="n" place="N"/>
      <connect-in port="control_22" place="control_22"/>
      <connect-out-many port="v" place="d_vectors_22"/>
    </transition>

    <transition name="Combination_22">
      <defun>
        <in name="v" type="list"/>
        <out name="vec" type="list"/>
        <module name="feynman_module" function="partition_22(v, vec)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="numeric"/>
          <cinclude href="sstream"/>
          <cinclude href="../include/feynman/feynman.hpp"/>
          <code><![CDATA[
          std::vector<int> x;
          for (const auto& elem : v) {
            auto ptr = boost::get<int>(&elem) ;
              x.push_back(*ptr);
          }
          vector2d gen=iterate( x);
          using pnet_value = pnet::type::value::value_type;
          using pnet_list = std::list<pnet_value>;
          for (std::vector<int> &a : gen)
          {
              pnet_list temp_a;
              for (int xi : a)
              {
                  temp_a.push_back(pnet::type::value::value_type(xi));
              }
              vec.push_back(temp_a);
          }
                 ]]>
          </code>
        </module>
      </defun>
      <connect-in port="v" place="d_vectors_22"/>
      <connect-out-many port="vec" place="branchtype_22"/>
    </transition>

    <transition name="feynman_degree_22">
      <defun>
        <in name="deg" type="int"/>
        <in name="a" type="list"/>
        <in name="G" type="list"/>
        <out name="s" type="string"/>
        <module name="feynman_module" function="feynman_integral_degree_22(deg,s,G,a)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="numeric"/>
          <cinclude href="tuple"/>
          <cinclude href="algorithm"/>
          <cinclude href="unordered_map"/>
          <cinclude href="functional"/>
          <cinclude href="cmath"/>
          <cinclude href="sstream"/>
          <cinclude href="stack"/>
          <cinclude href="unordered_set"/>
          <cinclude href="feynman.hpp"/>
          <code><![CDATA[
          std::vector<int> xxx;
          for (const auto &vii : G)
          {
              if (auto ptr = boost::get<int>(&vii))
              {
                  xxx.push_back( *ptr );
              }
          }
          std::vector<std::pair<int, int>> Gv;
          for (size_t i = 0; i < xxx.size(); i += 2)
          {
              Gv.push_back(std::make_pair(xxx[i], xxx[i + 1]));
          }
          std::vector<int> av;
          int c=0;
          for (const auto &xi : a)
          {
              if (auto ptr = boost::get<int>(&xi))
              {
                  av.push_back( *ptr);
                  c+=*ptr;
              }
          }
          unsigned long fe=feynman_integral_branch_type(Gv, av);
          s=std::to_string(fe);
          //std::cout << " feynman_degree_22 s: " << s << std::endl;
                 ]]>
          </code>
        </module>
      </defun>
      <connect-read port="deg" place="deg"/>
      <connect-in port="a" place="branchtype_22"/>
      <connect-read port="G" place="graph"/>
      <connect-out port="s" place="fey_out_22"/>
    </transition>

    <transition name="Reduce_22">
      <defun>
        <in name="s" type="string"/>
        <inout name="sum" type="string"/>
        <out name="ns" type="control"/>
        <module name="feynman_module" function="plus_22 (ns,s, sum)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="tuple"/>
          <cinclude href="algorithm"/>
          <cinclude href="unordered_map"/>
          <cinclude href="functional"/>
          <cinclude href="cmath"/>
          <cinclude href="sstream"/>
          <cinclude href="stack"/>
          <cinclude href="unordered_set"/>
          <cinclude href="feynman.hpp"/>
          <code><![CDATA[
          unsigned long s1 = std::stoul(s);
          //std::cout << " Reduce_22 s1: " << s1 << std::endl;
          unsigned long s2 = std::stoul(sum);
          //std::cout << " Reduce_22 s2: " << s2 << std::endl;
          unsigned long fe = s1 + s2;
          sum = std::to_string(fe);
          //std::cout << " Reduce_22 sum: " << sum << std::endl;
                 ]]>
          </code>
        </module>
      </defun>
      <connect-in port="s" place="fey_out_22"/>
      <connect-inout port="sum" place="sum_22"/>
      <connect-out port="ns" place="ns"/>
    </transition>

    <transition name="sum_number">
      <defun>
        <in name="ns" type="control"/>
        <inout name="counter_total" type="unsigned long"/>
        <module name="feynman_module" function="control1 (ns,counter_total)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="sstream"/>
          <code><![CDATA[
          counter_total +=1;
          //std::cout << " sum_number counter_total: " << counter_total << std::endl;
                 ]]>
          </code>
        </module>
      </defun>
      <connect-in port="ns" place="ns"/>
      <connect-inout port="counter_total" place="counter_total"/>
    </transition>

    <transition name="equality">
      <defun>
        <in name="total" type="unsigned long"/>
        <in name="counter_total" type="unsigned long"/>
        <out name="fey_sum" type="string"/>
        <in name="sum_2" type="string"/>
        <in name="sum_3" type="string"/>
        <in name="sum_4" type="string"/>
        <in name="sum_5" type="string"/>
        <in name="sum_6" type="string"/>
        <in name="sum_7" type="string"/>
        <in name="sum_8" type="string"/>
        <in name="sum_9" type="string"/>
        <in name="sum_10" type="string"/>
        <in name="sum_11" type="string"/>
        <in name="sum_12" type="string"/>
        <in name="sum_13" type="string"/>
        <in name="sum_14" type="string"/>
        <in name="sum_15" type="string"/>
        <in name="sum_16" type="string"/>
        <in name="sum_17" type="string"/>
        <in name="sum_18" type="string"/>
        <in name="sum_19" type="string"/>
        <in name="sum_20" type="string"/>
        <in name="sum_21" type="string"/>
        <in name="sum_22" type="string"/>
        <module name="feynman_module" function="final (total,counter_total,fey_sum,sum_2,sum_3,sum_4,sum_5,sum_6,sum_7,sum_8,sum_9,sum_10,sum_11,sum_12,sum_13,sum_14,sum_15,sum_16,sum_17,sum_18,sum_19,sum_20,sum_21,sum_22)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="sstream"/>
          <cinclude href="feynman/feynman.hpp"/>
          <code><![CDATA[
          //std::cout << " equality total: " << total << std::endl;
          std::vector<std::string> sum_vec;
          sum_vec.push_back(sum_2);
          sum_vec.push_back(sum_3);
          sum_vec.push_back(sum_4);
          sum_vec.push_back(sum_5);
          sum_vec.push_back(sum_6);
          sum_vec.push_back(sum_7);
          sum_vec.push_back(sum_8);
          sum_vec.push_back(sum_9);
          sum_vec.push_back(sum_10);
          sum_vec.push_back(sum_11);
          sum_vec.push_back(sum_12);
          sum_vec.push_back(sum_13);
          sum_vec.push_back(sum_14);
          sum_vec.push_back(sum_15);
          sum_vec.push_back(sum_16);
          sum_vec.push_back(sum_17);
          sum_vec.push_back(sum_18);
          sum_vec.push_back(sum_19);
          sum_vec.push_back(sum_20);
          sum_vec.push_back(sum_21);
          sum_vec.push_back(sum_22);
          
          std::string sum_vec_str = vectorToString(sum_vec," ");
          //std::cout << " equality sum_vec_str: " << sum_vec_str << std::endl;
          fey_sum = sum_vec_str;
                 ]]>
          </code>
        </module>
      </defun>
      <connect-read port="total" place="total"/>
      <connect-read port="counter_total" place="counter_total"/>
      <connect-out port="fey_sum" place="fey_sum"/>
      <connect-in port="sum_2" place="sum_2"/>
      <connect-in port="sum_3" place="sum_3"/>
      <connect-in port="sum_4" place="sum_4"/>
      <connect-in port="sum_5" place="sum_5"/>
      <connect-in port="sum_6" place="sum_6"/>
      <connect-in port="sum_7" place="sum_7"/>
      <connect-in port="sum_8" place="sum_8"/>
      <connect-in port="sum_9" place="sum_9"/>
      <connect-in port="sum_10" place="sum_10"/>
      <connect-in port="sum_11" place="sum_11"/>
      <connect-in port="sum_12" place="sum_12"/>
      <connect-in port="sum_13" place="sum_13"/>
      <connect-in port="sum_14" place="sum_14"/>
      <connect-in port="sum_15" place="sum_15"/>
      <connect-in port="sum_16" place="sum_16"/>
      <connect-in port="sum_17" place="sum_17"/>
      <connect-in port="sum_18" place="sum_18"/>
      <connect-in port="sum_19" place="sum_19"/>
      <connect-in port="sum_20" place="sum_20"/>
      <connect-in port="sum_21" place="sum_21"/>
      <connect-in port="sum_22" place="sum_22"/>
      <condition>
      ${counter_total}:eq: ${total}
      </condition>
    </transition>

    <transition name="Quasimodular">
      <defun>
        <in name="fey_sum" type="string"/>
        <out name="answer" type="string"/>
        <module name="feynman_module" function="Quasi (fey_sum,answer)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="sstream"/>
          <cinclude href="Quasi.hpp"/>
          <cinclude href="feynman.hpp"/>
          <code><![CDATA[
          answer = fey_sum;
          //std::cout << " Quasimodular answer: " << answer << std::endl;
                 ]]>
          </code>
        </module>
      </defun>
      <connect-in port="fey_sum" place="fey_sum"/>
      <connect-out port="answer" place="answer"/>
    </transition>

  </net>
</defun>
