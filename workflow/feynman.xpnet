<?xml version="1.0" encoding="UTF-8"?>
<defun name="feynman">
    <in name="input" type="string" place="input"/>
    <in name="P0" type="string" place="P0"/>
    <out name="result" type="string" place="P_41"/>
    <net>
        <place name="P0" type="string"/>
        <place name="input" type="string"/>
        <place name="control_11" type="control"/>
        <place name="control_21" type="control"/>
        <place name="control_22" type="control"/>
        <place name="control_23" type="control"/>
        <place name="control_31" type="control"/>
        <place name="control_32" type="control"/>
        <place name="control_41" type="control"/>
        <place name="P_11" type="string"/>
        <place name="P_21" type="string"/>
        <place name="P_22" type="string"/>
        <place name="P_23" type="string"/>
        <place name="P_31" type="string"/>
        <place name="P_32" type="string"/>
        <place name="P_41" type="string"/>
        <transition name="T_11">
            <defun>
                <in name="control_11" type="control"/>
                <in name="P0" type="string"/>
                <in name="input" type="string"/>
                <out name="P_11" type="string"/>
                <module name="feynman" function="f_T_11 (control_11, P0, input, P_11)">
              <cinclude href="feynman.hpp"/> 
                    <code><![CDATA[
                        std::cout << "DEBUG: Transition T_11 starting." << std::endl;
                        int res = h(4, 5);
                        P_11 = std::to_string(res);
                    ]]></code>
                </module>
            </defun>
        </transition>
        <transition name="T_21">
            <defun>
                <in name="control_21" type="control"/>
                <in name="P_11" type="string"/>
                <out name="P_21" type="string"/>
                <module name="feynman" function="f_T_21 (control_21, P_11, P_21)">
              <cinclude href="feynman.hpp"/> 
                    <code><![CDATA[
                        std::cout << "DEBUG: Transition T_21 starting." << std::endl;
                        int input=std::stoi(P_11);
                        std::string output_value;
                        int result = g(input, output_value);
                        P_21 = std::to_string(res);
                    ]]></code>
                </module>
            </defun>
        </transition>
        <transition name="T_22">
            <defun>
                <in name="control_22" type="control"/>
                <in name="P_11" type="string"/>
                <out name="P_22" type="string"/>
                <module name="feynman" function="f_T_22 (control_22, P_11, P_22)">
              <cinclude href="feynman.hpp"/> 
                    <code><![CDATA[
                        std::cout << "DEBUG: Transition T_22 starting." << std::endl;
                        int input=std::stoi(P_11);
                        std::string output_value;
                        int result = g(input, output_value);
                        P_22 = std::to_string(res);
                    ]]></code>
                </module>
            </defun>
        </transition>
        <transition name="T_23">
            <defun>
                <in name="control_23" type="control"/>
                <in name="P_11" type="string"/>
                <out name="P_23" type="string"/>
                <module name="feynman" function="f_T_23 (control_23, P_11, P_23)">
              <cinclude href="feynman.hpp"/> 
                    <code><![CDATA[
                        std::cout << "DEBUG: Transition T_23 starting." << std::endl;
                        int input=std::stoi(P_11);
                        std::string output_value;
                        int result = g(input, output_value);
                        P_23 = std::to_string(res);
                    ]]></code>
                </module>
            </defun>
        </transition>
        <transition name="T_31">
            <defun>
                <in name="control_31" type="control"/>
                <in name="P_21" type="string"/>
                <in name="P_22" type="string"/>
                <out name="P_31" type="string"/>
                <module name="feynman" function="f_T_31 (control_31, P_21, P_22, P_31)">
              <cinclude href="feynman.hpp"/> 
                    <code><![CDATA[
                        std::cout << "DEBUG: Transition T_31 starting." << std::endl;
                        int input=std::stoi(P_21);
                        std::string output_value;
                        int result = g(input, output_value);
                        P_31 = std::to_string(res);
                    ]]></code>
                </module>
            </defun>
        </transition>
        <transition name="T_32">
            <defun>
                <in name="control_32" type="control"/>
                <in name="P_22" type="string"/>
                <in name="P_23" type="string"/>
                <out name="P_32" type="string"/>
                <module name="feynman" function="f_T_32 (control_32, P_22, P_23, P_32)">
              <cinclude href="feynman.hpp"/> 
                    <code><![CDATA[
                        std::cout << "DEBUG: Transition T_32 starting." << std::endl;
                        int input=std::stoi(P_22);
                        std::string output_value;
                        int result = g(input, output_value);
                        P_32 = std::to_string(res);
                    ]]></code>
                </module>
            </defun>
        </transition>
        <transition name="T_41">
            <defun>
                <in name="control_41" type="control"/>
                <in name="P_31" type="string"/>
                <in name="P_32" type="string"/>
                <out name="P_41" type="string"/>
                <module name="feynman" function="f_T_41 (control_41, P_31, P_32, P_41)">
              <cinclude href="feynman.hpp"/> 
                    <code><![CDATA[
                        std::cout << "DEBUG: Transition T_41 starting." << std::endl;
                        int input=std::stoi(P_31);
                        std::string output_value;
                        int result = g(input, output_value);
                        P_41 = std::to_string(res);
                    ]]></code>
                </module>
            </defun>
        </transition>
    </net>
</defun>
