<defun name="feynman_deg">

  <in name="degree" type="int" place="degree"/>
  <in name="N" type="int" place="N"/>
  <in name="m" type="int" place="m"/>
  <in name="graph" type="list" place="graph"/>
  <in name="total" type="unsigned long" place="total"/>

  <out name="answer" type="unsigned long" place="answer"/>

  <net>
    <place name="degree" type="int"/>
    <place name="N" type="int"/>
    <place name="m" type="int"/>
      <place name="total" type="unsigned long"/>
  <place name="vectors" type="list"/>
    <place name="state" type="list"/>
  <transition name="transition2">
      <defun>
       <in name="d" type="int"/>
        <in name="n" type="int"/>
        <out name="vec" type="list"/>
        <out name="vec_copy" type="list"/>

        <module name="feynman_module" function=" iterat(n,d, vec,vec_copy)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="numeric"/>
          <cinclude href="sstream"/>
          <cinclude href="feynman.hpp"/>

          <code><![CDATA[
  using pnet_value = pnet::type::value::value_type;
   using pnet_list = std::list<pnet_value>;
         std::vector<int> x(n, 0);
              x.front() = d ;
  /***********************************************************
  ************************************************************/
      pnet_list tmp;
    if(x[n-1]!= d){
              for (int xi : x)
              {
                tmp.push_back(pnet_value(xi));
              }
         vec_copy.push_back(tmp) ;
    }
  /***********************************************************
  ************************************************************/
   //std::string    ve = vectorToStringInt(x);

    vec.push_back(tmp) ;

   // vec.push_back(ve);

          ]]>
          </code>
        </module>
      </defun>
      <connect-in port="n" place="N"/>
      <connect-in port="d" place="degree"/>
      <connect-out-many port="vec" place="vectors"/>
      <connect-out-many port="vec_copy" place="state"/>

    </transition>

    <transition name="transition3">
      <defun>
        <in name="m" type="int"/>
        <in name="v" type="list"/>

        <out name="vec" type="list"/>
        <out name="vec_copy" type="list"/>
        <in name="counter" type="int"/>

        <module name="feynman_module" function=" iterator(m,counter,v, vec,vec_copy)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="numeric"/>
          <cinclude href="sstream"/>
          <cinclude href="feynman.hpp"/>
          <code><![CDATA[
    using pnet_value = pnet::type::value::value_type;
    using pnet_list = std::list<pnet_value>;

    //std::vector<int> x=stringToVectorInt(v);
     std::vector<int> x;
          for (const auto& elem : v) {
            auto ptr = boost::get<int>(&elem) ;
              x.push_back(*ptr);
          }

    int nn=x.size();
    int d = std::accumulate(x.begin(), x.end(), 0);
    vector2d ru;
    for (int ii=0; ii<m; ii++){
       if(x[nn-1]== d){
          break ;
      }
      else{
        x=next_partition(x);
        pnet_list tmpx;
        for (int xi : x)
        {
          tmpx.push_back(pnet_value(xi));
        }
        vec.push_back(tmpx);

        //std::string xx =vectorToStringInt(x);
        //vec.push_back(xx);
      }
    }
  /**************************************************************************
  ***************************************************************************/

    if(x[nn-1]!= d){
      pnet_list tmp;
      for (int xi : x)
      {
        tmp.push_back(pnet_value(xi));
      }
           vec_copy.push_back(tmp) ;
      //vec_copy=vectorToStringInt(x) ;
    }
   /* else {
      last_vector=std::string {"stop"};
    }
        <condition>
      ${last_vector}:ne:"stop"
      </condition>*/
          ]]>
          </code>
        </module>
      </defun>

      <condition>
        ${counter} :gt: 0
      </condition>
      <connect-read port="m" place="m"/>
      <connect-in port="counter" place="counter"/>
      <connect-out-many port="vec" place="vectors"/>
      <connect-out-many port="vec_copy" place="state"/>
      <connect-in port="v" place="state"/>

    </transition>

    <place name="graph" type="list"/>

    <transition name="transition4">
      <defun>
        <in name="branchs" type="list"/>
        <in name="G" type="list"/>

        <out name="fey" type="unsigned long"/>

        <module name="feynman_module" function="fey feynman_integral_degree(G,branchs)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="numeric"/>
          <cinclude href="tuple"/>
          <cinclude href="algorithm"/>
          <cinclude href="unordered_map"/>
          <cinclude href="functional"/>
          <cinclude href="cmath"/>
          <cinclude href="sstream"/>
          <cinclude href="stack"/>
          <cinclude href="unordered_set"/>
          <cinclude href="feynman.hpp"/>
          <code><![CDATA[

          std::vector<int> xxx; // Define xxx 
    for (const auto &vii : G)
    {
        if (auto ptr = boost::get<int>(&vii))
        {                             // Check if the element is an integer
            xxx.push_back( *ptr ); // Push the integer to the vector xxx
        }
    }
  std::vector<std::pair<int, int>> Gv;

    // Iterate over the vector of integers, creating pairs from consecutive elements
    for (size_t i = 0; i < xxx.size(); i += 2)
    {
        Gv.push_back(std::make_pair(xxx[i], xxx[i + 1]));
    }


// Read the vector of integers from the string
 std::vector<int> av;
 for (const auto &xi : branchs)
        {
            if (auto ptr = boost::get<int>(&xi))
            {
                av.push_back( *ptr);
            }
        }

     //std::vector<int> av= stringToVectorInt(branchs) ;
      unsigned long fe=feynman_integral_branch_type(Gv, av);

   
    return fe;
      ]]>
          </code>
        </module>
      </defun>

      <connect-read port="G" place="graph"/>
      <connect-in port="branchs" place="vectors"/>
      <connect-out port="fey" place="fey"/>
    </transition>

    <place name="fey" type="unsigned long" />
    <place name="counter" type="int">
      <token>
        <value>3</value>
      </token>
    </place>

    <place name="limit" type="int">
      <token>
        <value>0</value>
      </token>
    </place>
    <place name="sum" type="unsigned long">
      <token>
        <value>0UL</value>
      </token>
    </place>

    <transition name="transition5">
      <defun>
        <in name="fey" type="unsigned long"/>
        <out name="ns" type="control"/>
        <out name="ms" type="control"/>
        <inout name="sum" type="unsigned long"/>

        <module name="feynman_module" function="plus (ms,ns,fey, sum)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="numeric"/>
          <cinclude href="feynman.hpp"/>
          <code><![CDATA[
            sum += fey;
          ]]>
          </code>
        </module>
      </defun>
      <connect-in port="fey" place="fey"/>
      <connect-inout port="sum" place="sum"/>
      <connect-out port="ns" place="ns"/>
      <connect-out port="ms" place="ms"/>
    </transition>


  <place name="ms" type="control" />

  <transition name="transition61">
      <defun>
        <in name="ms" type="control"/>
        <in name="m" type="int"/>
        <out name="counter" type="int"/>
        <inout name="limit" type="int"/>
        <module name="feynman_module" function=" control2 (m,counter,ms,limit)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="sstream"/>
          <code><![CDATA[

              limit+=1;
            if(limit==m){
              limit=0;
               counter=m;
            }

            else{
              counter=0;
            }   

         ]]>
          </code>
        </module>
      </defun>
      <connect-read port="m" place="m"/>
      <connect-in port="ms" place="ms"/>
      <connect-inout port="limit" place="limit"/>
      <connect-out port="counter" place="counter"/>
    </transition>


    <place name="ns" type="control"/>

    <place name="counter_total" type="unsigned long">
      <token>
        <value>0UL</value>
      </token>
    </place>

 <transition name="transition6">
      <defun>
        <in name="ns" type="control"/>
        <inout name="counter_total" type="unsigned long"/>
        <module name="feynman_module" function=" control1 (ns,counter_total)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="sstream"/>
          <code><![CDATA[

          counter_total +=1;

         ]]>
          </code>
        </module>
      </defun>
      <connect-in port="ns" place="ns"/>
      <connect-inout port="counter_total" place="counter_total"/>
    </transition>


 <transition name="transition7">
      <defun>
        <in name="total" type="unsigned long"/>
        <in name="counter_total" type="unsigned long"/>
        <inout name="answer" type="unsigned long"/>

        <module name="feynman_module" function=" final (answer,total,counter_total)">
          <cinclude href="iostream"/>
          <cinclude href="vector"/>
          <cinclude href="sstream"/>
          <code><![CDATA[


         ]]>
          </code>
        </module>
      </defun>
        <condition>
      ${counter_total}:eq: ${total}
      </condition>
      <connect-read port="total" place="total"/>
      <connect-out port="answer" place="answer"/>
      <connect-in port="counter_total" place="counter_total"/>
      <connect-in port="answer" place="sum"/>

    </transition>
    <place name="answer" type="unsigned long" />

  </net>

</defun>